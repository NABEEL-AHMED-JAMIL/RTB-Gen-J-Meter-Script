<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Banner 100" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="server" elementType="Argument">
            <stringProp name="Argument.name">server</stringProp>
            <stringProp name="Argument.value">rtbstaging.admaxim.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">isha</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Rtb-Request-Variable" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="battr" elementType="Argument">
            <stringProp name="Argument.name">battr</stringProp>
            <stringProp name="Argument.value">1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="topframe" elementType="Argument">
            <stringProp name="Argument.name">topframe</stringProp>
            <stringProp name="Argument.value">0,1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="btype" elementType="Argument">
            <stringProp name="Argument.name">btype</stringProp>
            <stringProp name="Argument.value">1,2,3,4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apiVideo" elementType="Argument">
            <stringProp name="Argument.name">apiVideo</stringProp>
            <stringProp name="Argument.value">1,2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apiBanner" elementType="Argument">
            <stringProp name="Argument.name">apiBanner</stringProp>
            <stringProp name="Argument.value">3,5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pos" elementType="Argument">
            <stringProp name="Argument.name">pos</stringProp>
            <stringProp name="Argument.value">0,1,2,3,4,5,6,7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocols" elementType="Argument">
            <stringProp name="Argument.name">protocols</stringProp>
            <stringProp name="Argument.value">2,3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sequence" elementType="Argument">
            <stringProp name="Argument.name">sequence</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mimes" elementType="Argument">
            <stringProp name="Argument.name">mimes</stringProp>
            <stringProp name="Argument.value">&quot;video/x-flv&quot;,&quot;video/mp4&quot;,&quot;application/x-shockwave-flash&quot;,&quot;application/javascript&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="linearity" elementType="Argument">
            <stringProp name="Argument.name">linearity</stringProp>
            <stringProp name="Argument.value">1,2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startdelay" elementType="Argument">
            <stringProp name="Argument.name">startdelay</stringProp>
            <stringProp name="Argument.value">0,-1,-2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="placement" elementType="Argument">
            <stringProp name="Argument.name">placement</stringProp>
            <stringProp name="Argument.value">1,2,3,4,5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="skip" elementType="Argument">
            <stringProp name="Argument.name">skip</stringProp>
            <stringProp name="Argument.value">0,1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minduration" elementType="Argument">
            <stringProp name="Argument.name">minduration</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxduration" elementType="Argument">
            <stringProp name="Argument.name">maxduration</stringProp>
            <stringProp name="Argument.value">0,10,15,30,60,90</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxextended" elementType="Argument">
            <stringProp name="Argument.name">maxextended</stringProp>
            <stringProp name="Argument.value">0,-1,1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="playbackmethod" elementType="Argument">
            <stringProp name="Argument.name">playbackmethod</stringProp>
            <stringProp name="Argument.value">1,2,3,4,5,6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delivery" elementType="Argument">
            <stringProp name="Argument.name">delivery</stringProp>
            <stringProp name="Argument.value">1,2,3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minbitrate" elementType="Argument">
            <stringProp name="Argument.name">minbitrate</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxbitrate" elementType="Argument">
            <stringProp name="Argument.name">maxbitrate</stringProp>
            <stringProp name="Argument.value">1500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="boxingallowed" elementType="Argument">
            <stringProp name="Argument.name">boxingallowed</stringProp>
            <stringProp name="Argument.value">0,1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dnt" elementType="Argument">
            <stringProp name="Argument.name">dnt</stringProp>
            <stringProp name="Argument.value">0,1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="consent" elementType="Argument">
            <stringProp name="Argument.name">consent</stringProp>
            <stringProp name="Argument.value">0,1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="gdpr" elementType="Argument">
            <stringProp name="Argument.name">gdpr</stringProp>
            <stringProp name="Argument.value">0,1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="at" elementType="Argument">
            <stringProp name="Argument.name">at</stringProp>
            <stringProp name="Argument.value">1,2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tmax" elementType="Argument">
            <stringProp name="Argument.name">tmax</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="coppa" elementType="Argument">
            <stringProp name="Argument.name">coppa</stringProp>
            <stringProp name="Argument.value">0,1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="gender" elementType="Argument">
            <stringProp name="Argument.name">gender</stringProp>
            <stringProp name="Argument.value">M,F,1,2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="connectiontype" elementType="Argument">
            <stringProp name="Argument.name">connectiontype</stringProp>
            <stringProp name="Argument.value">1,2,3,4,5,6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="js" elementType="Argument">
            <stringProp name="Argument.name">js</stringProp>
            <stringProp name="Argument.value">0,1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bcat" elementType="Argument">
            <stringProp name="Argument.name">bcat</stringProp>
            <stringProp name="Argument.value">IAB1,IAB2,IAB3,IAB4,IAB5,IAB6,IAB7,IAB8,IAB9,IAB10,IAB11,IAB12,IAB13,IAB14,IAB15,IAB16,IAB17,IAB18,IAB19,IAB20,IAB21,IAB13,IAB14,IAB15,IAB16,IAB17,IAB18,IAB19,IAB20,IAB21,IAB13,IAB14,IAB15,IAB16,IAB17,IAB18,IAB19,IAB20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="badv" elementType="Argument">
            <stringProp name="Argument.name">badv</stringProp>
            <stringProp name="Argument.value">www.limeroad.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="language" elementType="Argument">
            <stringProp name="Argument.name">language</stringProp>
            <stringProp name="Argument.value">es,gu,sk,bn,el,zh,en,de,id,en,lt,lv,de,ro,ar_sa,he,ta,tl,vi,pt,sv,nl,ml,fr,hi,kn,hu,en,nl,ar_ae,so,fr,ca,da,sw,fr,de,it,en,cs,mr,ja,th,ar_ps,pa,en,bg,tr,sr,de,fr,pa,ur,ko,zh,or,uk,nb,hr,ar,en,en,fi,ar_il,sl,it,is,pl,te,es,en,ar_eg,ms,ru,en</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="carrier" elementType="Argument">
            <stringProp name="Argument.name">carrier</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="type" elementType="Argument">
            <stringProp name="Argument.name">type</stringProp>
            <stringProp name="Argument.value">1,2,3,4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="imp_id" elementType="Argument">
            <stringProp name="Argument.name">imp_id</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secure" elementType="Argument">
            <stringProp name="Argument.name">secure</stringProp>
            <stringProp name="Argument.value">0,1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="instl" elementType="Argument">
            <stringProp name="Argument.name">instl</stringProp>
            <stringProp name="Argument.value">0,1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bidfloor" elementType="Argument">
            <stringProp name="Argument.name">bidfloor</stringProp>
            <stringProp name="Argument.value">1.0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bidfloorcur" elementType="Argument">
            <stringProp name="Argument.name">bidfloorcur</stringProp>
            <stringProp name="Argument.value">USD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adunits" elementType="Argument">
            <stringProp name="Argument.name">adunits</stringProp>
            <stringProp name="Argument.value">1,2,3,4,501</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="layout" elementType="Argument">
            <stringProp name="Argument.name">layout</stringProp>
            <stringProp name="Argument.value">1,2,3,4,5,6,7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="required" elementType="Argument">
            <stringProp name="Argument.name">required</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="data_asset_type" elementType="Argument">
            <stringProp name="Argument.name">data_asset_type</stringProp>
            <stringProp name="Argument.value">1,2,11,12</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="data_length" elementType="Argument">
            <stringProp name="Argument.name">data_length</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="title_length" elementType="Argument">
            <stringProp name="Argument.name">title_length</stringProp>
            <stringProp name="Argument.value">70</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="img_asset_type" elementType="Argument">
            <stringProp name="Argument.name">img_asset_type</stringProp>
            <stringProp name="Argument.value">1,2,3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="img_w" elementType="Argument">
            <stringProp name="Argument.name">img_w</stringProp>
            <stringProp name="Argument.value">1200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="img_h" elementType="Argument">
            <stringProp name="Argument.name">img_h</stringProp>
            <stringProp name="Argument.value">627</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bmimes" elementType="Argument">
            <stringProp name="Argument.name">bmimes</stringProp>
            <stringProp name="Argument.value">image\\/jpeg,image\\/png</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Config File" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="text_path" elementType="Argument">
            <stringProp name="Argument.name">text_path</stringProp>
            <stringProp name="Argument.value">C:/Users/AdMaxim/Downloads/isha file/isha file/txt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_path" elementType="Argument">
            <stringProp name="Argument.name">csv_path</stringProp>
            <stringProp name="Argument.value">C:/Users/AdMaxim/Downloads/isha file/isha file/csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="response_path" elementType="Argument">
            <stringProp name="Argument.name">response_path</stringProp>
            <stringProp name="Argument.value">C:/Users/AdMaxim/Downloads/isha file/isha file/response</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="segment" enabled="true">
        <stringProp name="filename">${csv_path}/segment.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">swidth,sheight,scountry,sdeviceid,scampaignid,sremoteip,slattitude,slongitude,surl,szip</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="demographic" enabled="true">
        <stringProp name="filename">${csv_path}/demographic.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">bwidth,bhight,com1,gender,country,yob,lattude,lontude,state,city,h1</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="device" enabled="true">
        <stringProp name="filename">${csv_path}/deviceidlatest.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">make,model,os,devicetype,osv,ua</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ifa" enabled="true">
        <stringProp name="filename">${csv_path}/ifa.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">ifa</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="app" enabled="true">
        <stringProp name="filename">${csv_path}/app.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">app_id,app_pub_id,appcat_arr,app_keywords,app_bundle,app_name,app_storeurl,app_pub_name</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="site" enabled="true">
        <stringProp name="filename">${csv_path}/site.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">site_id,site_pub_id,sitecat_arr,site_keywords,site_pub_name,site_page,site_domain,site_pub_domain</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="pmp" enabled="true">
        <stringProp name="filename">${csv_path}/pmp.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">private_auction,deals_id,,at,bidfloor</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="banner" enabled="true">
        <stringProp name="filename">${csv_path}/banner.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">wmin1,hmin1,cat1_arr</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="api-framwork" enabled="true">
        <stringProp name="filename">${csv_path}/apiframework.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">a_width,a_hight,a_country,a_api,a_campainId</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="pmp-function" enabled="true">
        <stringProp name="filename">${csv_path}/pmp-functional.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">pmp_private_auction,pmp_deal_id1,pmp_deal_id2,pmp_bidfloor1,pmp_bidfloor2,pmp_at,pmp_bidfloor,pmp_campaignid,pmp_width,pmp_height</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="pinpoint" enabled="true">
        <stringProp name="filename">${csv_path}/pinpoint.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">pinpoint_width,pinpoint_hight,pinpoint_country,pinpont_lat,pinpoint_lon,pinpoint_geo_type,pinpoint_radius,pinpoint_shape,pinpoint_campaignid</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="video" enabled="true">
        <stringProp name="filename">${csv_path}/video.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">video_width,video_height,video_duration,video_country,video_lat,video_lon,video_type</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="native_banner" enabled="true">
        <stringProp name="filename">${csv_path}/native_banner.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">natv_ba_img_type,natv_ba_required,natv_ba_wmin,natv_ba_hmin</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Banner-Demographic" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494566508000</longProp>
        <longProp name="ThreadGroup.end_time">1494566508000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">contentType</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-admaxim-mode</stringProp>
              <stringProp name="Header.value">dev</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Banner" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;
import org.apache.commons.io.FileUtils;
import java.util.Arrays;
import org.apache.commons.codec.digest.DigestUtils;


String cvsSplit = &quot;,&quot;;
String buildArray = &quot;|&quot;;
String openRtbSplit = &quot;=&quot;;
String patternRgex = &quot;^[a-z0-9]*_arr$&quot;;
String minduration = vars.get(&quot;minduration&quot;);
String sequence = vars.get(&quot;sequence&quot;);
String minbitrate = vars.get(&quot;minbitrate&quot;);
String maxbitrate = vars.get(&quot;maxbitrate&quot;);
String tmax = vars.get(&quot;tmax&quot;);
String bidfloor = vars.get(&quot;bidfloor&quot;);
String bidfloorcur = vars.get(&quot;bidfloorcur&quot;);
String imp_id =  vars.get(&quot;imp_idure&quot;);
String required = vars.get(&quot;required&quot;);
String data_length = vars.get(&quot;data_length&quot;);
String title_length = vars.get(&quot;title_length&quot;);
String img_w = vars.get(&quot;img_w&quot;);
String img_h = vars.get(&quot;img_h&quot;);
String[] battr = vars.get(&quot;battr&quot;).split(cvsSplit);
String[] topframe = vars.get(&quot;topframe&quot;).split(cvsSplit);
String[] btype = vars.get(&quot;btype&quot;).split(cvsSplit);
String[] apiVideo = vars.get(&quot;apiVideo&quot;).split(cvsSplit);
String[] apiBanner = vars.get(&quot;apiBanner&quot;).split(cvsSplit);
String[] pos = vars.get(&quot;pos&quot;).split(cvsSplit);
String[] protocols = vars.get(&quot;protocols&quot;).split(cvsSplit);
String[] mimes = vars.get(&quot;mimes&quot;).split(cvsSplit);
String[] linearity = vars.get(&quot;linearity&quot;).split(cvsSplit);
String[] startdelay = vars.get(&quot;startdelay&quot;).split(cvsSplit);
String[] placement = vars.get(&quot;placement&quot;).split(cvsSplit);
String[] skip = vars.get(&quot;skip&quot;).split(cvsSplit);
String[] maxduration = vars.get(&quot;maxduration&quot;).split(cvsSplit);
String[] maxextended = vars.get(&quot;maxextended&quot;).split(cvsSplit);
String[] playbackmethod = vars.get(&quot;playbackmethod&quot;).split(cvsSplit);
String[] delivery = vars.get(&quot;delivery&quot;).split(cvsSplit);
String[] boxingallowed = vars.get(&quot;boxingallowed&quot;).split(cvsSplit);
String[] dnt = vars.get(&quot;dnt&quot;).split(cvsSplit);
String[] consent = vars.get(&quot;consent&quot;).split(cvsSplit);
String[] gdpr = vars.get(&quot;gdpr&quot;).split(cvsSplit);
String[] at = vars.get(&quot;at&quot;).split(cvsSplit);
String[] coppa = vars.get(&quot;coppa&quot;).split(cvsSplit);
String[] gender = vars.get(&quot;gender&quot;).split(cvsSplit);
String[] connectiontype = vars.get(&quot;connectiontype&quot;).split(cvsSplit);
String[] js = vars.get(&quot;js&quot;).split(cvsSplit);
String[] bcat = vars.get(&quot;bcat&quot;).split(cvsSplit);
String[] badv = vars.get(&quot;badv&quot;).split(cvsSplit);
String[] language = vars.get(&quot;language&quot;).split(cvsSplit);
String carrier = null;
String[] type	= vars.get(&quot;type&quot;).split(cvsSplit);
String[] secure = vars.get(&quot;secure&quot;).split(cvsSplit);
String[] instl = vars.get(&quot;instl&quot;).split(cvsSplit);
String[] adunits = vars.get(&quot;adunits&quot;).split(cvsSplit);
String[] layout = vars.get(&quot;layout&quot;).split(cvsSplit);
String[] data_asset_type = vars.get(&quot;data_asset_type&quot;).split(cvsSplit);
String[] img_asset_type = vars.get(&quot;img_asset_type&quot;).split(cvsSplit);
//------------------------------------------
String TXT_PATH = vars.get(&quot;text_path&quot;);
String RTB_PATH = TXT_PATH+&quot;/rtb.txt&quot;;
String textBannerFile = TXT_PATH+&quot;/banner.txt&quot;;
String textSiteFile = TXT_PATH+&quot;/site.txt&quot;;
String textAPPFile = TXT_PATH+&quot;/app.txt&quot;;
String textPMPFile = TXT_PATH+&quot;/pmp.txt&quot;;
String textDealFile = TXT_PATH+&quot;/deal.txt&quot;;
String textDeviceFile = TXT_PATH+&quot;/device.txt&quot;;

String uuId() { return UUID.randomUUID().toString(); }

int getRequestPlace() { return ThreadLocalRandom.current().nextInt(0, 2); }

String arrayBuilder(String[] subArray, Boolean quotes) {
	StringBuilder build = new StringBuilder();
	for(int i=0; i&lt;subArray.length; i++) {
		if(quotes) { // \&quot; in
			build.append(&quot;\&quot;&quot;+subArray[i]+&quot;\&quot;&quot;).append(cvsSplit);
		} else {
			build.append(subArray[i]).append(cvsSplit);
		}
	}
	return build.substring(0, build.length()-1);
}

void setPath(String pubId) {
	log.info(&quot;PUB ID &quot; + pubId);
	String path = null;
	if(pubId.equals(&quot;18563&quot;)) {
		path = &quot;/adserver/inneractiveBidder&quot;;	
	} else if (pubId.equals(&quot;17542&quot;)) {
		path = &quot;/adserver/axonixBidder&quot;;		
	} else if (pubId.equals(&quot;18551&quot;)) {
		path = &quot;/adserver/mobfoxBidder&quot;;
	} else if (pubId.equals(&quot;19048&quot;)) {
		path = &quot;/adserver/unityBidder&quot;;	
	} else if (pubId.equals(&quot;19999&quot;)) {
	    path = &quot;/adserver/inMobiBidder&quot;;
	} else if (pubId.equals(&quot;19214&quot;)) {
		path = &quot;/adserver/smartyAdsBidder&quot;;
	} else if (pubId.equals(&quot;20051&quot;)) {
		path = &quot;/adserver/gothamAdsBidder&quot;;
	} else {
		path = &quot;/adserver/mobfoxBidder&quot;;
	}
	
	log.info(&quot;PATH :- &quot; + path);
	vars.put(&quot;url&quot;, path);
}

// done work perfect
String bannerStr() throws IOException {
	
	String banner_file_obj = FileUtils.readFileToString(new File(textBannerFile));	
	banner_file_obj = banner_file_obj.replace(&quot;${banner_id}&quot;, uuId());
	banner_file_obj = banner_file_obj.replace(&quot;${topframe1}&quot;, topframe[ThreadLocalRandom.current().nextInt(0, topframe.length)]);
	banner_file_obj = banner_file_obj.replace(&quot;${pos1}&quot;, pos[ThreadLocalRandom.current().nextInt(0, pos.length)]);
	int random = ThreadLocalRandom.current().nextInt(0, battr.length);	
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${battr1_arr}]\&quot;&quot;, &quot;[&quot;+ arrayBuilder(Arrays.copyOfRange(battr, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	random = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, apiBanner.length);	
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${api1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(apiBanner, 0, random != 0 ? random : 2), false)+&quot;]&quot;);
	random = ThreadLocalRandom.current().nextInt(0, btype.length);
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${btype1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(btype, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	banner_file_obj = banner_file_obj.replace(&quot;${width}&quot;, vars.get(&quot;bwidth&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${height}&quot;, vars.get(&quot;bhight&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${wmin}&quot;, vars.get(&quot;wmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${hmin}&quot;, vars.get(&quot;hmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${cat_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;cat1_arr&quot;).split(cvsSplit), true)+&quot;]&quot;);

	return banner_file_obj;
}

// done work perfect
String siteStr() throws IOException {

	String site_file_obj = FileUtils.readFileToString(new File(textSiteFile));
	
	site_file_obj = site_file_obj.replace(&quot;${site_id1}&quot;, vars.get(&quot;site_id&quot;));
	String pub_id = vars.get(&quot;site_pub_id&quot;);
	setPath(pub_id);
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_id1}&quot;, pub_id);
	site_file_obj = site_file_obj.replace(&quot;\&quot;[${sitecat_arr1}]\&quot;&quot;,&quot;[&quot;+arrayBuilder(vars.get(&quot;sitecat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	site_file_obj = site_file_obj.replace(&quot;${site_keywords1}&quot;, vars.get(&quot;site_keywords&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_name1}&quot;, vars.get(&quot;site_pub_name&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_page1}&quot;, vars.get(&quot;site_page&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_domain1}&quot;, vars.get(&quot;site_domain&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_domain1}&quot;, vars.get(&quot;site_pub_domain&quot;));	
	
	return site_file_obj;
}

// done work perfect
String appStr() throws IOException {
	
	String app_file_obj = FileUtils.readFileToString(new File(textAPPFile));

	app_file_obj = app_file_obj.replace(&quot;${app_id1}&quot;, vars.get(&quot;app_id&quot;));
	String pub_id = vars.get(&quot;app_pub_id&quot;);
	setPath(pub_id);
	app_file_obj = app_file_obj.replace(&quot;${app_pub_id1}&quot;, pub_id);
	app_file_obj = app_file_obj.replace(&quot;\&quot;[${appcat_arr1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;appcat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	app_file_obj = app_file_obj.replace(&quot;${app_keywords1}&quot;, vars.get(&quot;app_keywords&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_bundle1}&quot;, vars.get(&quot;app_bundle&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_name1}&quot;, vars.get(&quot;app_name&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_storeurl1}&quot;, vars.get(&quot;app_storeurl&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_pub_name1}&quot;, vars.get(&quot;app_pub_name&quot;));
		
	return app_file_obj;
}

// done work perfect
String pmpStr() throws IOException {
	
	String pmp_file_obj = FileUtils.readFileToString(new File(textPMPFile));
	String deal_file_object = FileUtils.readFileToString(new File(textDealFile));
	
	pmp_file_obj = pmp_file_obj.replace(&quot;${private_auction1}&quot;, vars.get(&quot;private_auction&quot;));
	deal_file_object = deal_file_object.replace(&quot;${deals_id1}&quot;, vars.get(&quot;deals_id&quot;));
	deal_file_object = deal_file_object.replace(&quot;${at1}&quot;, at[ThreadLocalRandom.current().nextInt(0, at.length)]);
	deal_file_object = deal_file_object.replace(&quot;${bidfloor1}&quot;, vars.get(&quot;bidfloor&quot;));
	pmp_file_obj = pmp_file_obj.replace(&quot;%deals%&quot;, deal_file_object);
	return pmp_file_obj;
	
}

// done work perfect
String deviceStr() throws IOException {

	String device_file_obj = FileUtils.readFileToString(new File(textDeviceFile));

	device_file_obj = device_file_obj.replace(&quot;${connectiontype1}&quot;, connectiontype[ThreadLocalRandom.current().nextInt(0, connectiontype.length)]);
	device_file_obj = device_file_obj.replace(&quot;${js1}&quot;, js[ThreadLocalRandom.current().nextInt(0, js.length)]);
	device_file_obj = device_file_obj.replace(&quot;${language1}&quot;, language[ThreadLocalRandom.current().nextInt(0, language.length)]);
	device_file_obj = device_file_obj.replace(&quot;${type1}&quot;, type[ThreadLocalRandom.current().nextInt(0, type.length)]);
	device_file_obj = device_file_obj.replace(&quot;${dnt1}&quot;, dnt[ThreadLocalRandom.current().nextInt(0, dnt.length)]);
	if(carrier == &quot;null&quot;  || carrier == null) {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${carrier1}\&quot;&quot;, &quot;null&quot;);
	} else {
		device_file_obj = device_file_obj.replace(&quot;${carrier1}&quot;, carrier);
	}
	
	device_file_obj = device_file_obj.replace(&quot;\&quot;${ip1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;${country1}&quot;, vars.get(&quot;country&quot;));
	device_file_obj = device_file_obj.replace(&quot;${region1}&quot;, vars.get(&quot;state&quot;));
	device_file_obj = device_file_obj.replace(&quot;${city1}&quot;, vars.get(&quot;city&quot;));
	device_file_obj = device_file_obj.replace(&quot;${lat1}&quot;, vars.get(&quot;lattude&quot;));
	device_file_obj = device_file_obj.replace(&quot;${lon1}&quot;, vars.get(&quot;lontude&quot;));
	device_file_obj = device_file_obj.replace(&quot;\&quot;${zip1}\&quot;&quot;, &quot;null&quot;);
	String ifa = vars.get(&quot;ifa&quot;);
	device_file_obj = device_file_obj.replace(&quot;${ifa1}&quot;, ifa);
	device_file_obj = device_file_obj.replace(&quot;${dpisha1}&quot;, getSHA1MD5(ifa,true));
	device_file_obj = device_file_obj.replace(&quot;${dpidmd5}&quot;, getSHA1MD5(ifa,false));

	device_file_obj = device_file_obj.replace(&quot;${make1}&quot;, vars.get(&quot;make&quot;));
	device_file_obj = device_file_obj.replace(&quot;${model1}&quot;, vars.get(&quot;model&quot;));
	device_file_obj = device_file_obj.replace(&quot;${os1}&quot;, vars.get(&quot;os&quot;));
	device_file_obj = device_file_obj.replace(&quot;${devicetype1}&quot;, vars.get(&quot;devicetype&quot;));
	device_file_obj = device_file_obj.replace(&quot;${osv1}&quot;, vars.get(&quot;osv&quot;));
	device_file_obj = device_file_obj.replace(&quot;${ua1}&quot;, vars.get(&quot;ua&quot;));
	
	return device_file_obj;
}

//,h1
// done work perfect
String getSHA1MD5(String ifa, boolean isSHA) {
	if (isSHA) {
		return DigestUtils.shaHex(ifa);
	} else {
		return DigestUtils.md5Hex(ifa);
	}
}

// done work perfect
String rtbStr() throws IOException {
	// replace all think and send
	String rtb_file_obj = FileUtils.readFileToString(new File(RTB_PATH));

	rtb_file_obj = rtb_file_obj.replace(&quot;${id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${imp_id1}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloor1}&quot;, bidfloor);
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloorcur1}&quot;, bidfloorcur);
	rtb_file_obj = rtb_file_obj.replace(&quot;${secure1}&quot;, secure[ThreadLocalRandom.current().nextInt(0, secure.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${instl1}&quot;, instl[ThreadLocalRandom.current().nextInt(0, instl.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${at1}&quot;, at[ThreadLocalRandom.current().nextInt(0, at.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${tmax1}&quot;, tmax);
	int random  = ThreadLocalRandom.current().nextInt(0, bcat.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${bcat1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(bcat, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	random  = ThreadLocalRandom.current().nextInt(0, badv.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${badv1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(badv, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	rtb_file_obj = rtb_file_obj.replace(&quot;${user_id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${gender1}&quot;, vars.get(&quot;gender&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${consent1}&quot;, consent[ThreadLocalRandom.current().nextInt(0, consent.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${yob1}&quot;,  vars.get(&quot;yob&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${coppa1}&quot;, coppa[ThreadLocalRandom.current().nextInt(0, coppa.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${gdpr1}&quot;, gdpr[ThreadLocalRandom.current().nextInt(0, gdpr.length)]);

	return rtb_file_obj;
}

// done work perfect
void requestCreate() {
	try {

		String mainRequest = rtbStr();
		mainRequest = mainRequest.replace(&quot;%%requestType%%&quot;,bannerStr());
		
		int requestPlace = getRequestPlace();
		if(requestPlace == 0) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,siteStr());
		} else if (requestPlace == 1) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,appStr());
		}

	     int usePmp = getRequestPlace();
		if(usePmp == 1) {
			mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, pmpStr());
		} else {
		    mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, &quot;&quot;);			
		}

		mainRequest = mainRequest.replace(&quot;%%deviceType%%&quot;,deviceStr());

		log.info(&quot;&lt;========= Start ======&gt;&quot;);
		log.info(mainRequest);
		vars.put(&quot;index&quot;, mainRequest);
		log.info(&quot;&lt;========= End ======&gt;&quot;);
	} catch (Exception ex) {
		log.err(&quot;&lt;========= Error-Start ======&gt;&quot;);
		log.err(ex.getLocalizedMessage());
		log.err(&quot;&lt;========= Error-End ======&gt;&quot;);
	}
}


try {
    //your code here
    requestCreate();
} catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.jmeter.service.FileServer;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;
import net.sf.json.JSONArray;

try {
	
	FileOutputStream file = new FileOutputStream(vars.get(&quot;response_path&quot;)+&quot;/demographic-response.csv&quot;,true);
	PrintStream printStream = new PrintStream(file);
	String com1 = vars.get(&quot;com1&quot;);	
	String jsonSting = prev.getResponseDataAsString();
	String response = &quot;No-Match&quot;;
	if(jsonSting != null &amp;&amp; jsonSting.contains(&quot;bid&quot;)) {
		JSONObject jsonObject = new JSONObject();
		jsonObject = (JSONObject) JSONSerializer.toJSON(jsonSting);
		if (jsonObject.containsKey(&quot;bid&quot;)) {
		    JSONArray bidArr = jsonObject.getJSONArray(&quot;bid&quot;);
		    for (Iterator iter = bidArr.iterator(); iter.hasNext();) {
			   JSONObject campainObject = iter.next();
			   if(campainObject.containsKey(&quot;campaignId&quot;)) {
		    	  	String camapignId = campainObject.getString(&quot;campaignId&quot;);
		    	  	if(camapignId.equals(com1)) {
		    	  		response = camapignId;
		    	  		log.info(&quot;Json Reslult Match With CampignId :- &quot; + camapignId);
    	  				printStream.println(com1 + &quot;,&quot; + camapignId);
		    	  		break;
		    	  	} else {
		    	  		log.info(&quot;Json Reslult Not Match With CampignId :- &quot; + camapignId);
    	  			     printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
		    	  	}
		    	  }
			}		    
		}		
	} else {
		log.info(&quot;Json: &quot; + &quot;No Reslult&quot;);
		printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
	}
	vars.put(&quot;response&quot;, response);
	printStream.close();
	file.close();
} catch (Exception ex) {
	log.err(&quot;Error :- &quot; + ex.getLocalizedMessage());
}
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Banner-app-${gender}-${com1}-${country}-${yob}-${h1}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${index}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${url}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.bid[*].campaignId</stringProp>
            <stringProp name="EXPECTED_VALUE">${com1}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Banner-Segment-Graphic" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494566508000</longProp>
        <longProp name="ThreadGroup.end_time">1494566508000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">contentType</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Banner" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;
import org.apache.commons.io.FileUtils;
import java.util.Arrays;
import org.apache.commons.codec.digest.DigestUtils;

String cvsSplit = &quot;,&quot;;
String buildArray = &quot;|&quot;;
String openRtbSplit = &quot;=&quot;;
String patternRgex = &quot;^[a-z0-9]*_arr$&quot;;
String minduration = vars.get(&quot;minduration&quot;);
String sequence = vars.get(&quot;sequence&quot;);
String minbitrate = vars.get(&quot;minbitrate&quot;);
String maxbitrate = vars.get(&quot;maxbitrate&quot;);
String tmax = vars.get(&quot;tmax&quot;);
String bidfloor = vars.get(&quot;bidfloor&quot;);
String bidfloorcur = vars.get(&quot;bidfloorcur&quot;);
String imp_id =  vars.get(&quot;imp_idure&quot;);
String required = vars.get(&quot;required&quot;);
String data_length = vars.get(&quot;data_length&quot;);
String title_length = vars.get(&quot;title_length&quot;);
String img_w = vars.get(&quot;img_w&quot;);
String img_h = vars.get(&quot;img_h&quot;);
String[] battr = vars.get(&quot;battr&quot;).split(cvsSplit);
String[] topframe = vars.get(&quot;topframe&quot;).split(cvsSplit);
String[] btype = vars.get(&quot;btype&quot;).split(cvsSplit);
String[] apiVideo = vars.get(&quot;apiVideo&quot;).split(cvsSplit);
String[] apiBanner = vars.get(&quot;apiBanner&quot;).split(cvsSplit);
String[] pos = vars.get(&quot;pos&quot;).split(cvsSplit);
String[] protocols = vars.get(&quot;protocols&quot;).split(cvsSplit);
String[] mimes = vars.get(&quot;mimes&quot;).split(cvsSplit);
String[] linearity = vars.get(&quot;linearity&quot;).split(cvsSplit);
String[] startdelay = vars.get(&quot;startdelay&quot;).split(cvsSplit);
String[] placement = vars.get(&quot;placement&quot;).split(cvsSplit);
String[] skip = vars.get(&quot;skip&quot;).split(cvsSplit);
String[] maxduration = vars.get(&quot;maxduration&quot;).split(cvsSplit);
String[] maxextended = vars.get(&quot;maxextended&quot;).split(cvsSplit);
String[] playbackmethod = vars.get(&quot;playbackmethod&quot;).split(cvsSplit);
String[] delivery = vars.get(&quot;delivery&quot;).split(cvsSplit);
String[] boxingallowed = vars.get(&quot;boxingallowed&quot;).split(cvsSplit);
String[] dnt = vars.get(&quot;dnt&quot;).split(cvsSplit);
String[] consent = vars.get(&quot;consent&quot;).split(cvsSplit);
String[] gdpr = vars.get(&quot;gdpr&quot;).split(cvsSplit);
String[] at = vars.get(&quot;at&quot;).split(cvsSplit);
String[] coppa = vars.get(&quot;coppa&quot;).split(cvsSplit);
String[] gender = vars.get(&quot;gender&quot;).split(cvsSplit);
String[] connectiontype = vars.get(&quot;connectiontype&quot;).split(cvsSplit);
String[] js = vars.get(&quot;js&quot;).split(cvsSplit);
String[] bcat = vars.get(&quot;bcat&quot;).split(cvsSplit);
String[] badv = vars.get(&quot;badv&quot;).split(cvsSplit);
String[] language = vars.get(&quot;language&quot;).split(cvsSplit);
String carrier = null;
String[] type	= vars.get(&quot;type&quot;).split(cvsSplit);
String[] secure = vars.get(&quot;secure&quot;).split(cvsSplit);
String[] instl = vars.get(&quot;instl&quot;).split(cvsSplit);
String[] adunits = vars.get(&quot;adunits&quot;).split(cvsSplit);
String[] layout = vars.get(&quot;layout&quot;).split(cvsSplit);
String[] data_asset_type = vars.get(&quot;data_asset_type&quot;).split(cvsSplit);
String[] img_asset_type = vars.get(&quot;img_asset_type&quot;).split(cvsSplit);
//------------------------------------------
String TXT_PATH = vars.get(&quot;text_path&quot;);
String RTB_PATH = TXT_PATH+&quot;/rtb.txt&quot;;
String textBannerFile = TXT_PATH+&quot;/banner.txt&quot;;
String textSiteFile = TXT_PATH+&quot;/site.txt&quot;;
String textAPPFile = TXT_PATH+&quot;/app.txt&quot;;
String textPMPFile = TXT_PATH+&quot;/pmp.txt&quot;;
String textDealFile = TXT_PATH+&quot;/deal.txt&quot;;
String textDeviceFile = TXT_PATH+&quot;/device.txt&quot;;

String uuId() { return UUID.randomUUID().toString(); }

int getRequestPlace() { return ThreadLocalRandom.current().nextInt(0, 2); }

String arrayBuilder(String[] subArray, Boolean quotes) {
	StringBuilder build = new StringBuilder();
	for(int i=0; i&lt;subArray.length; i++) {
		if(quotes) { // \&quot; in
			build.append(&quot;\&quot;&quot;+subArray[i]+&quot;\&quot;&quot;).append(cvsSplit);
		} else {
			build.append(subArray[i]).append(cvsSplit);
		}
	}
	return build.substring(0, build.length()-1);
}

void setPath(String pubId) {
	log.info(&quot;PUB ID &quot; + pubId);
	String path = null;
	if(pubId.equals(&quot;18563&quot;)) {
		path = &quot;/adserver/inneractiveBidder&quot;;	
	} else if (pubId.equals(&quot;17542&quot;)) {
		path = &quot;/adserver/axonixBidder&quot;;		
	} else if (pubId.equals(&quot;18551&quot;)) {
		path = &quot;/adserver/mobfoxBidder&quot;;
	} else if (pubId.equals(&quot;19048&quot;)) {
		path = &quot;/adserver/unityBidder&quot;;	
	} else if (pubId.equals(&quot;19999&quot;)) {
	    path = &quot;/adserver/inMobiBidder&quot;;
	} else if (pubId.equals(&quot;19214&quot;)) {
		path = &quot;/adserver/smartyAdsBidder&quot;;
	} else if (pubId.equals(&quot;20051&quot;)) {
		path = &quot;/adserver/gothamAdsBidder&quot;;
	} else {
		path = &quot;/adserver/mobfoxBidder&quot;;
	}
	
	log.info(&quot;PATH :- &quot; + path);
	vars.put(&quot;url&quot;, path);
}

// done work perfect
String bannerStr() throws IOException {

	String banner_file_obj = FileUtils.readFileToString(new File(textBannerFile));
	
	banner_file_obj = banner_file_obj.replace(&quot;${banner_id}&quot;, uuId());
	banner_file_obj = banner_file_obj.replace(&quot;${topframe1}&quot;, topframe[ThreadLocalRandom.current().nextInt(0, topframe.length)]);
	banner_file_obj = banner_file_obj.replace(&quot;${pos1}&quot;, pos[ThreadLocalRandom.current().nextInt(0, pos.length)]);
	int random = ThreadLocalRandom.current().nextInt(0, battr.length);	
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${battr1_arr}]\&quot;&quot;, &quot;[&quot;+ arrayBuilder(Arrays.copyOfRange(battr, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	random = ThreadLocalRandom.current().nextInt(0, apiBanner.length);	
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${api1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(apiBanner, 0, random != 0 ? random : 2), false)+&quot;]&quot;);
	random = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, btype.length);
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${btype1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(btype, 0, random != 0 ? random : 1), false)+&quot;]&quot;);


    	String sWidth = vars.get(&quot;swidth&quot;);
	if(!sWidth.equals(&quot;null&quot;) &amp;&amp;  sWidth != null) {
		banner_file_obj = banner_file_obj.replace(&quot;${width}&quot;, sWidth);
	} else {
		banner_file_obj = banner_file_obj.replace(&quot;\&quot;${width}\&quot;&quot;, sWidth);
	}

	String bHeight = vars.get(&quot;sheight&quot;);
	if(!bHeight.equals(&quot;null&quot;) &amp;&amp;  bHeight != null) {
		banner_file_obj = banner_file_obj.replace(&quot;${height}&quot;, bHeight);
	} else {
		banner_file_obj = banner_file_obj.replace(&quot;\&quot;${height}\&quot;&quot;, bHeight);
	}
	
	banner_file_obj = banner_file_obj.replace(&quot;${wmin}&quot;, vars.get(&quot;wmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${hmin}&quot;, vars.get(&quot;hmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${cat_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;cat1_arr&quot;).split(cvsSplit), true)+&quot;]&quot;);

	return banner_file_obj;
}

// done work perfect
String siteStr() throws IOException {

	String site_file_obj = FileUtils.readFileToString(new File(textSiteFile));
	
	site_file_obj = site_file_obj.replace(&quot;${site_id1}&quot;, vars.get(&quot;site_id&quot;));
	String pub_id = vars.get(&quot;site_pub_id&quot;);
	setPath(pub_id);
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_id1}&quot;, pub_id);
	site_file_obj = site_file_obj.replace(&quot;\&quot;[${sitecat_arr1}]\&quot;&quot;,&quot;[&quot;+arrayBuilder(vars.get(&quot;sitecat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	site_file_obj = site_file_obj.replace(&quot;${site_keywords1}&quot;, vars.get(&quot;site_keywords&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_name1}&quot;, vars.get(&quot;site_pub_name&quot;));


	String surl = vars.get(&quot;surl&quot;);
	if(!surl.equals(&quot;null&quot;) &amp;&amp;  surl != null) {
		site_file_obj = site_file_obj.replace(&quot;${site_page1}&quot;, surl);
	} else {
		site_file_obj = site_file_obj.replace(&quot;\&quot;${site_page1}\&quot;&quot;, surl);
	}
	
	site_file_obj = site_file_obj.replace(&quot;${site_domain1}&quot;, vars.get(&quot;site_domain&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_domain1}&quot;, vars.get(&quot;site_pub_domain&quot;));	
	
	return site_file_obj;
}

// done work perfect
String appStr() throws IOException {
	
	String app_file_obj = FileUtils.readFileToString(new File(textAPPFile));

	app_file_obj = app_file_obj.replace(&quot;${app_id1}&quot;, vars.get(&quot;app_id&quot;));
	String pub_id = vars.get(&quot;app_pub_id&quot;);
	setPath(pub_id);
	app_file_obj = app_file_obj.replace(&quot;${app_pub_id1}&quot;, pub_id);
	app_file_obj = app_file_obj.replace(&quot;\&quot;[${appcat_arr1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;appcat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	app_file_obj = app_file_obj.replace(&quot;${app_keywords1}&quot;, vars.get(&quot;app_keywords&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_bundle1}&quot;, vars.get(&quot;app_bundle&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_name1}&quot;, vars.get(&quot;app_name&quot;));


	String surl = vars.get(&quot;surl&quot;);
	if(!surl.equals(&quot;null&quot;) &amp;&amp;  surl != null) {
		app_file_obj = app_file_obj.replace(&quot;${app_storeurl1}&quot;, surl);
	} else {
		app_file_obj = app_file_obj.replace(&quot;\&quot;${app_storeurl1}\&quot;&quot;, surl);
	}
	
	app_file_obj = app_file_obj.replace(&quot;${app_pub_name1}&quot;, vars.get(&quot;app_pub_name&quot;));
		
	return app_file_obj;
}

// done work perfect
String pmpStr() throws IOException {
	
	String pmp_file_obj = FileUtils.readFileToString(new File(textPMPFile));
	String deal_file_object = FileUtils.readFileToString(new File(textDealFile));
	
	pmp_file_obj = pmp_file_obj.replace(&quot;${private_auction1}&quot;, vars.get(&quot;private_auction&quot;));
	deal_file_object = deal_file_object.replace(&quot;${deals_id1}&quot;, vars.get(&quot;deals_id&quot;));
	deal_file_object = deal_file_object.replace(&quot;${at1}&quot;, at[ThreadLocalRandom.current().nextInt(0, at.length)]);
	deal_file_object = deal_file_object.replace(&quot;${bidfloor1}&quot;, vars.get(&quot;bidfloor&quot;));
	pmp_file_obj = pmp_file_obj.replace(&quot;%deals%&quot;, deal_file_object);
	return pmp_file_obj;
	
}

// done work perfect
String deviceStr() throws IOException {

	String device_file_obj = FileUtils.readFileToString(new File(textDeviceFile));

	device_file_obj = device_file_obj.replace(&quot;${connectiontype1}&quot;, connectiontype[ThreadLocalRandom.current().nextInt(0, connectiontype.length)]);
	device_file_obj = device_file_obj.replace(&quot;${js1}&quot;, js[ThreadLocalRandom.current().nextInt(0, js.length)]);
	device_file_obj = device_file_obj.replace(&quot;${language1}&quot;, language[ThreadLocalRandom.current().nextInt(0, language.length)]);
	device_file_obj = device_file_obj.replace(&quot;${type1}&quot;, type[ThreadLocalRandom.current().nextInt(0, type.length)]);
	device_file_obj = device_file_obj.replace(&quot;${dnt1}&quot;, dnt[ThreadLocalRandom.current().nextInt(0, dnt.length)]);

	if(carrier == &quot;null&quot;  || carrier == null) {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${carrier1}\&quot;&quot;, &quot;null&quot;);
	} else {
		device_file_obj = device_file_obj.replace(&quot;${carrier1}&quot;, carrier);
	}

	String sRemoteip = vars.get(&quot;sremoteip&quot;);
	if(!sRemoteip.equals(&quot;null&quot;) &amp;&amp;  sRemoteip != null) {
		device_file_obj = device_file_obj.replace(&quot;${ip1}&quot;, sRemoteip);
	} else {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${ip1}\&quot;&quot;, sRemoteip);
	}

	
	String sCountry = vars.get(&quot;scountry&quot;);
	if(!sCountry.equals(&quot;null&quot;) &amp;&amp;  sCountrytry != null) {
	device_file_obj = device_file_obj.replace(&quot;${country1}&quot;, sCountry);
	} else {
	device_file_obj = device_file_obj.replace(&quot;\&quot;${country1}\&quot;&quot;, sCountry);
	}

	device_file_obj = device_file_obj.replace(&quot;\&quot;${region1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;\&quot;${city1}\&quot;&quot;, &quot;null&quot;);


	String sLattitude = vars.get(&quot;slattitude&quot;);
	if(!sLattitude.equals(&quot;null&quot;) &amp;&amp;  sLattitude != null) {
		device_file_obj = device_file_obj.replace(&quot;${lat1}&quot;, sLattitude);
	} else {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${lat1}\&quot;&quot;, sLattitude);
	}
	
	String sLongitude = vars.get(&quot;slongitude&quot;);	
	if(!sLongitude.equals(&quot;null&quot;) &amp;&amp;  sLongitude != null) {
		device_file_obj = device_file_obj.replace(&quot;${lon1}&quot;, sLongitude);
	} else {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${lon1}\&quot;&quot;, sLongitude);
	}


	String szip = vars.get(&quot;szip&quot;);	
	if(!szip.equals(&quot;null&quot;) &amp;&amp;  szip != null) {
		device_file_obj = device_file_obj.replace(&quot;${zip1}&quot;, szip);
	} else {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${zip1}\&quot;&quot;, szip);
	}

	
	
	String deviceid = vars.get(&quot;sdeviceid&quot;);
	device_file_obj = device_file_obj.replace(&quot;${ifa1}&quot;, deviceid);
	device_file_obj = device_file_obj.replace(&quot;${dpisha1}&quot;, getSHA1MD5(deviceid,true));
	device_file_obj = device_file_obj.replace(&quot;${dpidmd5}&quot;, getSHA1MD5(deviceid,false));

	device_file_obj = device_file_obj.replace(&quot;${make1}&quot;, vars.get(&quot;make&quot;));
	device_file_obj = device_file_obj.replace(&quot;${model1}&quot;, vars.get(&quot;model&quot;));
	device_file_obj = device_file_obj.replace(&quot;${os1}&quot;, vars.get(&quot;os&quot;));
	device_file_obj = device_file_obj.replace(&quot;${devicetype1}&quot;, vars.get(&quot;devicetype&quot;));
	device_file_obj = device_file_obj.replace(&quot;${osv1}&quot;, vars.get(&quot;osv&quot;));
	device_file_obj = device_file_obj.replace(&quot;${ua1}&quot;, vars.get(&quot;ua&quot;));
	
	return device_file_obj;
}


// done work perfect
String getSHA1MD5(String ifa, boolean isSHA) {
	if (isSHA) {
		return DigestUtils.shaHex(ifa);
	} else {
		return DigestUtils.md5Hex(ifa);
	}
}


// done work perfect
String rtbStr() throws IOException {
	// replace all think and send
	String rtb_file_obj = FileUtils.readFileToString(new File(RTB_PATH));

	rtb_file_obj = rtb_file_obj.replace(&quot;${id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${imp_id1}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloor1}&quot;, bidfloor);
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloorcur1}&quot;, bidfloorcur);
	rtb_file_obj = rtb_file_obj.replace(&quot;${secure1}&quot;, secure[ThreadLocalRandom.current().nextInt(0, secure.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${instl1}&quot;, instl[ThreadLocalRandom.current().nextInt(0, instl.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${at1}&quot;, at[ThreadLocalRandom.current().nextInt(0, at.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${tmax1}&quot;, tmax);
	int random  = ThreadLocalRandom.current().nextInt(0, bcat.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${bcat1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(bcat, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	random  = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, badv.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${badv1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(badv, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	rtb_file_obj = rtb_file_obj.replace(&quot;${user_id}&quot;, uuId());

	rtb_file_obj = rtb_file_obj.replace(&quot;${gender1}&quot;, gender[ThreadLocalRandom.current().nextInt(0, gender.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${consent1}&quot;, consent[ThreadLocalRandom.current().nextInt(0, consent.length)]);
	String yob = vars.get(&quot;yob&quot;);
	rtb_file_obj = rtb_file_obj.replace(&quot;${yob1}&quot;, yob);
	rtb_file_obj = rtb_file_obj.replace(&quot;${coppa1}&quot;, coppa[ThreadLocalRandom.current().nextInt(0, coppa.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${gdpr1}&quot;, gdpr[ThreadLocalRandom.current().nextInt(0, gdpr.length)]);

	return rtb_file_obj;
}

// done work perfect
void requestCreate() {
	try {

		String mainRequest = rtbStr();
				
		mainRequest = mainRequest.replace(&quot;%%requestType%%&quot;,bannerStr());

		int requestPlace = getRequestPlace();
		if(requestPlace == 0) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,siteStr());
		} else if (requestPlace == 1) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,appStr());
		}

	     int usePmp = getRequestPlace();
		if(usePmp == 1) {
			mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, pmpStr());
		} else {
			mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, &quot;&quot;);
		}

		mainRequest = mainRequest.replace(&quot;%%deviceType%%&quot;,deviceStr());

		log.info(&quot;&lt;========= Start ======&gt;&quot;);
		log.info(mainRequest);
		vars.put(&quot;index&quot;, mainRequest);
		//vars.put(&quot;test&quot;, mainRequest);
		log.info(&quot;&lt;========= End ======&gt;&quot;);
	} catch (Exception ex) {
		log.err(&quot;&lt;========= Error-Start ======&gt;&quot;);
		log.err(ex.getLocalizedMessage());
		log.err(&quot;&lt;========= Error-End ======&gt;&quot;);
	}
}


try {
	log.info(&quot;Start ====&quot;);
    //your code here
    requestCreate();
    	log.info(&quot;End ====&quot;);
} catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}


</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.io.File;
import org.apache.jmeter.service.FileServer;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;
import net.sf.json.JSONArray;

try {
	
	FileOutputStream file = new FileOutputStream(vars.get(&quot;response_path&quot;)+&quot;/segment-response.csv&quot;,true);
	PrintStream printStream = new PrintStream(file);
	String response = &quot;No-Match&quot;;
	String com1 = vars.get(&quot;scampaignid&quot;);	
	String jsonSting = prev.getResponseDataAsString();
	
	if(jsonSting != null &amp;&amp; jsonSting.contains(&quot;bid&quot;)) {
		JSONObject jsonObject = new JSONObject();
		jsonObject = (JSONObject) JSONSerializer.toJSON(jsonSting);
		if (jsonObject.containsKey(&quot;bid&quot;)) {
		    JSONArray bidArr = jsonObject.getJSONArray(&quot;bid&quot;);
		    for (Iterator iter = bidArr.iterator(); iter.hasNext();) {
			   JSONObject campainObject = iter.next();
			   if(campainObject.containsKey(&quot;campaignId&quot;)) {
		    	  	String camapignId = campainObject.getString(&quot;campaignId&quot;);
		    	  	if(camapignId.equals(com1)) {
		    	  		response = camapignId;
		    	  		log.info(&quot;Json Reslult Match With CampignId :- &quot; + camapignId);
    	  				printStream.println(com1 + &quot;,&quot; + camapignId);
		    	  		break;
		    	  	} else {
		    	  		log.info(&quot;Json Reslult Not Match With CampignId :- &quot; + camapignId);
    	  			     printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
		    	  	}
		    	  }
			}		    
		}		
	} else {
		log.info(&quot;Json: &quot; + &quot;No Reslult&quot;);
		printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
	}
	vars.put(&quot;response&quot;, response);
	printStream.close();
	file.close();
} catch (Exception ex) {
	log.err(&quot;Error :- &quot; + ex.getLocalizedMessage());
}






</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Banner-app-${swidth}-${sheight}-${scountry}-${sdeviceid}-${scampaignid}-${sremoteip}-${slattitude}-${slongitude}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${index}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${url}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.bid[*].campaignId</stringProp>
            <stringProp name="EXPECTED_VALUE">${scampaignid}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Banner-Device-Graphic" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494566508000</longProp>
        <longProp name="ThreadGroup.end_time">1494566508000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">contentType</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Banner" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;
import org.apache.commons.io.FileUtils;
import java.util.Arrays;
import org.apache.commons.codec.digest.DigestUtils;


String cvsSplit = &quot;,&quot;;
String buildArray = &quot;|&quot;;
String openRtbSplit = &quot;=&quot;;
String patternRgex = &quot;^[a-z0-9]*_arr$&quot;;
String minduration = vars.get(&quot;minduration&quot;);
String sequence = vars.get(&quot;sequence&quot;);
String minbitrate = vars.get(&quot;minbitrate&quot;);
String maxbitrate = vars.get(&quot;maxbitrate&quot;);
String tmax = vars.get(&quot;tmax&quot;);
String bidfloor = vars.get(&quot;bidfloor&quot;);
String bidfloorcur = vars.get(&quot;bidfloorcur&quot;);
String imp_id =  vars.get(&quot;imp_idure&quot;);
String required = vars.get(&quot;required&quot;);
String data_length = vars.get(&quot;data_length&quot;);
String title_length = vars.get(&quot;title_length&quot;);
String img_w = vars.get(&quot;img_w&quot;);
String img_h = vars.get(&quot;img_h&quot;);
String[] battr = vars.get(&quot;battr&quot;).split(cvsSplit);
String[] topframe = vars.get(&quot;topframe&quot;).split(cvsSplit);
String[] btype = vars.get(&quot;btype&quot;).split(cvsSplit);
String[] apiVideo = vars.get(&quot;apiVideo&quot;).split(cvsSplit);
String[] apiBanner = vars.get(&quot;apiBanner&quot;).split(cvsSplit);
String[] pos = vars.get(&quot;pos&quot;).split(cvsSplit);
String[] protocols = vars.get(&quot;protocols&quot;).split(cvsSplit);
String[] mimes = vars.get(&quot;mimes&quot;).split(cvsSplit);
String[] linearity = vars.get(&quot;linearity&quot;).split(cvsSplit);
String[] startdelay = vars.get(&quot;startdelay&quot;).split(cvsSplit);
String[] placement = vars.get(&quot;placement&quot;).split(cvsSplit);
String[] skip = vars.get(&quot;skip&quot;).split(cvsSplit);
String[] maxduration = vars.get(&quot;maxduration&quot;).split(cvsSplit);
String[] maxextended = vars.get(&quot;maxextended&quot;).split(cvsSplit);
String[] playbackmethod = vars.get(&quot;playbackmethod&quot;).split(cvsSplit);
String[] delivery = vars.get(&quot;delivery&quot;).split(cvsSplit);
String[] boxingallowed = vars.get(&quot;boxingallowed&quot;).split(cvsSplit);
String[] dnt = vars.get(&quot;dnt&quot;).split(cvsSplit);
String[] consent = vars.get(&quot;consent&quot;).split(cvsSplit);
String[] gdpr = vars.get(&quot;gdpr&quot;).split(cvsSplit);
String[] at = vars.get(&quot;at&quot;).split(cvsSplit);
String[] coppa = vars.get(&quot;coppa&quot;).split(cvsSplit);
String[] gender = vars.get(&quot;gender&quot;).split(cvsSplit);
String[] connectiontype = vars.get(&quot;connectiontype&quot;).split(cvsSplit);
String[] js = vars.get(&quot;js&quot;).split(cvsSplit);
String[] bcat = vars.get(&quot;bcat&quot;).split(cvsSplit);
String[] badv = vars.get(&quot;badv&quot;).split(cvsSplit);
String[] language = vars.get(&quot;language&quot;).split(cvsSplit);
String carrier = null;
String[] type	= vars.get(&quot;type&quot;).split(cvsSplit);
String[] secure = vars.get(&quot;secure&quot;).split(cvsSplit);
String[] instl = vars.get(&quot;instl&quot;).split(cvsSplit);
String[] adunits = vars.get(&quot;adunits&quot;).split(cvsSplit);
String[] layout = vars.get(&quot;layout&quot;).split(cvsSplit);
String[] data_asset_type = vars.get(&quot;data_asset_type&quot;).split(cvsSplit);
String[] img_asset_type = vars.get(&quot;img_asset_type&quot;).split(cvsSplit);
//------------------------------------------
String TXT_PATH = vars.get(&quot;text_path&quot;);
String RTB_PATH = TXT_PATH+&quot;/rtb.txt&quot;;
String textBannerFile = TXT_PATH+&quot;/banner.txt&quot;;
String textSiteFile = TXT_PATH+&quot;/site.txt&quot;;
String textAPPFile = TXT_PATH+&quot;/app.txt&quot;;
String textPMPFile = TXT_PATH+&quot;/pmp.txt&quot;;
String textDealFile = TXT_PATH+&quot;/deal.txt&quot;;
String textDeviceFile = TXT_PATH+&quot;/device.txt&quot;;

String uuId() { return UUID.randomUUID().toString(); }

int getRequestPlace() { return ThreadLocalRandom.current().nextInt(0, 2); }

String arrayBuilder(String[] subArray, Boolean quotes) {
	StringBuilder build = new StringBuilder();
	for(int i=0; i&lt;subArray.length; i++) {
		if(quotes) { // \&quot; in
			build.append(&quot;\&quot;&quot;+subArray[i]+&quot;\&quot;&quot;).append(cvsSplit);
		} else {
			build.append(subArray[i]).append(cvsSplit);
		}
	}
	return build.substring(0, build.length()-1);
}

void setPath(String pubId) {
	log.info(&quot;PUB ID &quot; + pubId);
	String path = null;
	if(pubId.equals(&quot;18563&quot;)) {
		path = &quot;/adserver/inneractiveBidder&quot;;	
	} else if (pubId.equals(&quot;17542&quot;)) {
		path = &quot;/adserver/axonixBidder&quot;;		
	} else if (pubId.equals(&quot;18551&quot;)) {
		path = &quot;/adserver/mobfoxBidder&quot;;
	} else if (pubId.equals(&quot;19048&quot;)) {
		path = &quot;/adserver/unityBidder&quot;;	
	} else if (pubId.equals(&quot;19999&quot;)) {
	    path = &quot;/adserver/inMobiBidder&quot;;
	} else if (pubId.equals(&quot;19214&quot;)) {
		path = &quot;/adserver/smartyAdsBidder&quot;;
	} else if (pubId.equals(&quot;20051&quot;)) {
		path = &quot;/adserver/gothamAdsBidder&quot;;
	} else {
		path = &quot;/adserver/mobfoxBidder&quot;;
	}
	
	log.info(&quot;PATH :- &quot; + path);
	vars.put(&quot;url&quot;, path);
}

// done work perfect
String bannerStr() throws IOException {

	String banner_file_obj = FileUtils.readFileToString(new File(textBannerFile));
	
	banner_file_obj = banner_file_obj.replace(&quot;${banner_id}&quot;, uuId());
	banner_file_obj = banner_file_obj.replace(&quot;${topframe1}&quot;, topframe[ThreadLocalRandom.current().nextInt(0, topframe.length)]);
	banner_file_obj = banner_file_obj.replace(&quot;${pos1}&quot;, pos[ThreadLocalRandom.current().nextInt(0, pos.length)]);
	int random = ThreadLocalRandom.current().nextInt(0, battr.length);	
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${battr1_arr}]\&quot;&quot;, &quot;[&quot;+ arrayBuilder(Arrays.copyOfRange(battr, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	random = ThreadLocalRandom.current().nextInt(0, apiBanner.length);	
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${api1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(apiBanner, 0, random != 0 ? random : 2), false)+&quot;]&quot;);
	random = ThreadLocalRandom.current().nextInt(0, btype.length);
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${btype1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(btype, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	banner_file_obj = banner_file_obj.replace(&quot;${width}&quot;, vars.get(&quot;wmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${height}&quot;, vars.get(&quot;hmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${wmin}&quot;, vars.get(&quot;wmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${hmin}&quot;, vars.get(&quot;hmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${cat_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;cat1_arr&quot;).split(cvsSplit), true)+&quot;]&quot;);

	return banner_file_obj;
}

// done work perfect
String siteStr() throws IOException {

	String site_file_obj = FileUtils.readFileToString(new File(textSiteFile));
	
	site_file_obj = site_file_obj.replace(&quot;${site_id1}&quot;, vars.get(&quot;site_id&quot;));
	String pub_id = vars.get(&quot;site_pub_id&quot;);
	setPath(pub_id);
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_id1}&quot;, pub_id);
	site_file_obj = site_file_obj.replace(&quot;\&quot;[${sitecat_arr1}]\&quot;&quot;,&quot;[&quot;+arrayBuilder(vars.get(&quot;sitecat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	site_file_obj = site_file_obj.replace(&quot;${site_keywords1}&quot;, vars.get(&quot;site_keywords&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_name1}&quot;, vars.get(&quot;site_pub_name&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_page1}&quot;, vars.get(&quot;site_page&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_domain1}&quot;, vars.get(&quot;site_domain&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_domain1}&quot;, vars.get(&quot;site_pub_domain&quot;));	
	
	return site_file_obj;
}

// done work perfect
String appStr() throws IOException {
	
	String app_file_obj = FileUtils.readFileToString(new File(textAPPFile));

	app_file_obj = app_file_obj.replace(&quot;${app_id1}&quot;, vars.get(&quot;app_id&quot;));
	String pub_id = vars.get(&quot;app_pub_id&quot;);
	setPath(pub_id);
	app_file_obj = app_file_obj.replace(&quot;${app_pub_id1}&quot;, pub_id);
	app_file_obj = app_file_obj.replace(&quot;\&quot;[${appcat_arr1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;appcat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	app_file_obj = app_file_obj.replace(&quot;${app_keywords1}&quot;, vars.get(&quot;app_keywords&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_bundle1}&quot;, vars.get(&quot;app_bundle&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_name1}&quot;, vars.get(&quot;app_name&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_storeurl1}&quot;, vars.get(&quot;app_storeurl&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_pub_name1}&quot;, vars.get(&quot;app_pub_name&quot;));
		
	return app_file_obj;
}

// done work perfect
String pmpStr() throws IOException {

	String pmp_file_obj = FileUtils.readFileToString(new File(textPMPFile));
	String deal_file_object = FileUtils.readFileToString(new File(textDealFile));
	
	pmp_file_obj = pmp_file_obj.replace(&quot;${private_auction1}&quot;, vars.get(&quot;private_auction&quot;));
	deal_file_object = deal_file_object.replace(&quot;${deals_id1}&quot;, vars.get(&quot;deals_id&quot;));
	deal_file_object = deal_file_object.replace(&quot;${at1}&quot;, at[ThreadLocalRandom.current().nextInt(0, at.length)]);
	deal_file_object = deal_file_object.replace(&quot;${bidfloor1}&quot;, vars.get(&quot;bidfloor&quot;));
	pmp_file_obj = pmp_file_obj.replace(&quot;%deals%&quot;, deal_file_object);
	return pmp_file_obj;	
	
}

// done work perfect
String deviceStr() throws IOException {

	String device_file_obj = FileUtils.readFileToString(new File(textDeviceFile));

	device_file_obj = device_file_obj.replace(&quot;${connectiontype1}&quot;, connectiontype[ThreadLocalRandom.current().nextInt(0, connectiontype.length)]);
	device_file_obj = device_file_obj.replace(&quot;${js1}&quot;, js[ThreadLocalRandom.current().nextInt(0, js.length)]);
	device_file_obj = device_file_obj.replace(&quot;${language1}&quot;, language[ThreadLocalRandom.current().nextInt(0, language.length)]);
	device_file_obj = device_file_obj.replace(&quot;${type1}&quot;, type[ThreadLocalRandom.current().nextInt(0, type.length)]);
	device_file_obj = device_file_obj.replace(&quot;${dnt1}&quot;, dnt[ThreadLocalRandom.current().nextInt(0, dnt.length)]);
	if(carrier == &quot;null&quot;  || carrier == null) {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${carrier1}\&quot;&quot;, &quot;null&quot;);
	} else {
		device_file_obj = device_file_obj.replace(&quot;${carrier1}&quot;, carrier);
	}
	
	device_file_obj = device_file_obj.replace(&quot;\&quot;${ip1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;${country1}&quot;, vars.get(&quot;country&quot;));
	device_file_obj = device_file_obj.replace(&quot;${region1}&quot;, vars.get(&quot;state&quot;));
	device_file_obj = device_file_obj.replace(&quot;${city1}&quot;, vars.get(&quot;city&quot;));
	device_file_obj = device_file_obj.replace(&quot;${lat1}&quot;, vars.get(&quot;lattude&quot;));
	device_file_obj = device_file_obj.replace(&quot;${lon1}&quot;, vars.get(&quot;lontude&quot;));
	device_file_obj = device_file_obj.replace(&quot;\&quot;${zip1}\&quot;&quot;, &quot;null&quot;);
	String ifa = vars.get(&quot;ifa&quot;);
	device_file_obj = device_file_obj.replace(&quot;${ifa1}&quot;, ifa);
	device_file_obj = device_file_obj.replace(&quot;${dpisha1}&quot;, getSHA1MD5(ifa,true));
	device_file_obj = device_file_obj.replace(&quot;${dpidmd5}&quot;, getSHA1MD5(ifa,false));

	device_file_obj = device_file_obj.replace(&quot;${make1}&quot;, vars.get(&quot;make&quot;));
	device_file_obj = device_file_obj.replace(&quot;${model1}&quot;, vars.get(&quot;model&quot;));
	device_file_obj = device_file_obj.replace(&quot;${os1}&quot;, vars.get(&quot;os&quot;));
	device_file_obj = device_file_obj.replace(&quot;${devicetype1}&quot;, vars.get(&quot;devicetype&quot;));
	device_file_obj = device_file_obj.replace(&quot;${osv1}&quot;, vars.get(&quot;osv&quot;));
	device_file_obj = device_file_obj.replace(&quot;${ua1}&quot;, vars.get(&quot;ua&quot;));
	
	return device_file_obj;
}

//,h1
// done work perfect
String getSHA1MD5(String ifa, boolean isSHA) {
	if (isSHA) {
		return DigestUtils.shaHex(ifa);
	} else {
		return DigestUtils.md5Hex(ifa);
	}
}

// done work perfect
String rtbStr() throws IOException {
	// replace all think and send
	String rtb_file_obj = FileUtils.readFileToString(new File(RTB_PATH));

	rtb_file_obj = rtb_file_obj.replace(&quot;${id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${imp_id1}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloor1}&quot;, bidfloor);
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloorcur1}&quot;, bidfloorcur);
	rtb_file_obj = rtb_file_obj.replace(&quot;${secure1}&quot;, secure[ThreadLocalRandom.current().nextInt(0, secure.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${instl1}&quot;, instl[ThreadLocalRandom.current().nextInt(0, instl.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${at1}&quot;, at[ThreadLocalRandom.current().nextInt(0, at.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${tmax1}&quot;, tmax);
	int random  = ThreadLocalRandom.current().nextInt(0, bcat.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${bcat1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(bcat, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	random  = ThreadLocalRandom.current().nextInt(0, badv.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${badv1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(badv, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	rtb_file_obj = rtb_file_obj.replace(&quot;${user_id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${gender1}&quot;, vars.get(&quot;gender&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${consent1}&quot;, consent[ThreadLocalRandom.current().nextInt(0, consent.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${yob1}&quot;,  vars.get(&quot;yob&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${coppa1}&quot;, coppa[ThreadLocalRandom.current().nextInt(0, coppa.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${gdpr1}&quot;, gdpr[ThreadLocalRandom.current().nextInt(0, gdpr.length)]);

	return rtb_file_obj;
}

// done work perfect
void requestCreate() {
	try {

		String mainRequest = rtbStr();
				
		mainRequest = mainRequest.replace(&quot;%%requestType%%&quot;,bannerStr());

		int requestPlace = getRequestPlace();
		if(requestPlace == 0) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,siteStr());
		} else if (requestPlace == 1) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,appStr());
		}

	     int usePmp = getRequestPlace();
		if(usePmp == 1) {
			mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, pmpStr());
		} else {
		    mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, &quot;&quot;);			
		}

		mainRequest = mainRequest.replace(&quot;%%deviceType%%&quot;,deviceStr());

		log.info(&quot;&lt;========= Start ======&gt;&quot;);
		log.info(mainRequest);
		vars.put(&quot;index&quot;, mainRequest);
		log.info(&quot;&lt;========= End ======&gt;&quot;);
	} catch (Exception ex) {
		log.err(&quot;&lt;========= Error-Start ======&gt;&quot;);
		log.err(ex.getLocalizedMessage());
		log.err(&quot;&lt;========= Error-End ======&gt;&quot;);
	}
}


try {
    //your code here
    requestCreate();
} catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.io.File;
import org.apache.jmeter.service.FileServer;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;
import net.sf.json.JSONArray;

try {
	
	FileOutputStream file = new FileOutputStream(vars.get(&quot;response_path&quot;)+&quot;/device-response.csv&quot;,true);
	PrintStream printStream = new PrintStream(file);
	String com1 = vars.get(&quot;com1&quot;);	
	String jsonSting = prev.getResponseDataAsString();
	String response = &quot;No-Match&quot;;
	if(jsonSting != null &amp;&amp; jsonSting.contains(&quot;bid&quot;)) {
		JSONObject jsonObject = new JSONObject();
		jsonObject = (JSONObject) JSONSerializer.toJSON(jsonSting);
		if (jsonObject.containsKey(&quot;bid&quot;)) {
		    JSONArray bidArr = jsonObject.getJSONArray(&quot;bid&quot;);
		    for (Iterator iter = bidArr.iterator(); iter.hasNext();) {
			   JSONObject campainObject = iter.next();
			   if(campainObject.containsKey(&quot;campaignId&quot;)) {
		    	  	String camapignId = campainObject.getString(&quot;campaignId&quot;);
		    	  	if(camapignId.equals(com1)) {
		    	  		response = camapignId;
		    	  		log.info(&quot;Json Reslult Match With CampignId :- &quot; + camapignId);
    	  				printStream.println(com1 + &quot;,&quot; + camapignId);
		    	  		break;
		    	  	} else {
		    	  		log.info(&quot;Json Reslult Not Match With CampignId :- &quot; + camapignId);
    	  			     printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
		    	  	}
		    	  }
			}		    
		}		
	} else {
		log.info(&quot;Json: &quot; + &quot;No Reslult&quot;);
		printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
	}
	vars.put(&quot;response&quot;, response);
	printStream.close();
	file.close();
} catch (Exception ex) {
	log.err(&quot;Error :- &quot; + ex.getLocalizedMessage());
}
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Banner-app-${wmin1}-${hmin1}-${make}-${model}-${os}-${devicetype}-${osv}-${ua}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${index}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${url}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="false">
            <stringProp name="JSON_PATH">$.seatbid[0].bid[0].cid</stringProp>
            <stringProp name="EXPECTED_VALUE">${dcampaignid}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Api-Banner-app" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494566508000</longProp>
        <longProp name="ThreadGroup.end_time">1494566508000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">contentType</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-admaxim-mode</stringProp>
              <stringProp name="Header.value">dev</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Banner" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;
import org.apache.commons.io.FileUtils;
import java.util.Arrays;
import org.apache.commons.codec.digest.DigestUtils;


String cvsSplit = &quot;,&quot;;
String buildArray = &quot;|&quot;;
String openRtbSplit = &quot;=&quot;;
String patternRgex = &quot;^[a-z0-9]*_arr$&quot;;
String minduration = vars.get(&quot;minduration&quot;);
String sequence = vars.get(&quot;sequence&quot;);
String minbitrate = vars.get(&quot;minbitrate&quot;);
String maxbitrate = vars.get(&quot;maxbitrate&quot;);
String tmax = vars.get(&quot;tmax&quot;);
String bidfloor = vars.get(&quot;bidfloor&quot;);
String bidfloorcur = vars.get(&quot;bidfloorcur&quot;);
String imp_id =  vars.get(&quot;imp_idure&quot;);
String required = vars.get(&quot;required&quot;);
String data_length = vars.get(&quot;data_length&quot;);
String title_length = vars.get(&quot;title_length&quot;);
String img_w = vars.get(&quot;img_w&quot;);
String img_h = vars.get(&quot;img_h&quot;);
String[] battr = vars.get(&quot;battr&quot;).split(cvsSplit);
String[] topframe = vars.get(&quot;topframe&quot;).split(cvsSplit);
String[] btype = vars.get(&quot;btype&quot;).split(cvsSplit);
String[] apiVideo = vars.get(&quot;apiVideo&quot;).split(cvsSplit);
String[] apiBanner = vars.get(&quot;a_api&quot;).split(cvsSplit);
String[] pos = vars.get(&quot;pos&quot;).split(cvsSplit);
String[] protocols = vars.get(&quot;protocols&quot;).split(cvsSplit);
String[] mimes = vars.get(&quot;mimes&quot;).split(cvsSplit);
String[] linearity = vars.get(&quot;linearity&quot;).split(cvsSplit);
String[] startdelay = vars.get(&quot;startdelay&quot;).split(cvsSplit);
String[] placement = vars.get(&quot;placement&quot;).split(cvsSplit);
String[] skip = vars.get(&quot;skip&quot;).split(cvsSplit);
String[] maxduration = vars.get(&quot;maxduration&quot;).split(cvsSplit);
String[] maxextended = vars.get(&quot;maxextended&quot;).split(cvsSplit);
String[] playbackmethod = vars.get(&quot;playbackmethod&quot;).split(cvsSplit);
String[] delivery = vars.get(&quot;delivery&quot;).split(cvsSplit);
String[] boxingallowed = vars.get(&quot;boxingallowed&quot;).split(cvsSplit);
String[] dnt = vars.get(&quot;dnt&quot;).split(cvsSplit);
String[] consent = vars.get(&quot;consent&quot;).split(cvsSplit);
String[] gdpr = vars.get(&quot;gdpr&quot;).split(cvsSplit);
String[] at = vars.get(&quot;at&quot;).split(cvsSplit);
String[] coppa = vars.get(&quot;coppa&quot;).split(cvsSplit);
String[] gender = vars.get(&quot;gender&quot;).split(cvsSplit);
String[] connectiontype = vars.get(&quot;connectiontype&quot;).split(cvsSplit);
String[] js = vars.get(&quot;js&quot;).split(cvsSplit);
String[] bcat = vars.get(&quot;bcat&quot;).split(cvsSplit);
String[] badv = vars.get(&quot;badv&quot;).split(cvsSplit);
String[] language = vars.get(&quot;language&quot;).split(cvsSplit);
String carrier = null;
String[] type	= vars.get(&quot;type&quot;).split(cvsSplit);
String[] secure = vars.get(&quot;secure&quot;).split(cvsSplit);
String[] instl = vars.get(&quot;instl&quot;).split(cvsSplit);
String[] adunits = vars.get(&quot;adunits&quot;).split(cvsSplit);
String[] layout = vars.get(&quot;layout&quot;).split(cvsSplit);
String[] data_asset_type = vars.get(&quot;data_asset_type&quot;).split(cvsSplit);
String[] img_asset_type = vars.get(&quot;img_asset_type&quot;).split(cvsSplit);
//------------------------------------------
String TXT_PATH = vars.get(&quot;text_path&quot;);
String RTB_PATH = TXT_PATH+&quot;/rtb.txt&quot;;
String textBannerFile = TXT_PATH+&quot;/banner.txt&quot;;
String textSiteFile = TXT_PATH+&quot;/site.txt&quot;;
String textAPPFile = TXT_PATH+&quot;/app.txt&quot;;
String textPMPFile = TXT_PATH+&quot;/pmp.txt&quot;;
String textDealFile = TXT_PATH+&quot;/deal.txt&quot;;
String textDeviceFile = TXT_PATH+&quot;/device.txt&quot;;

String uuId() { return UUID.randomUUID().toString(); }

int getRequestPlace() { return ThreadLocalRandom.current().nextInt(0, 2); }

String arrayBuilder(String[] subArray, Boolean quotes) {
	StringBuilder build = new StringBuilder();
	for(int i=0; i&lt;subArray.length; i++) {
		if(quotes) { // \&quot; in
			build.append(&quot;\&quot;&quot;+subArray[i]+&quot;\&quot;&quot;).append(cvsSplit);
		} else {
			build.append(subArray[i]).append(cvsSplit);
		}
	}
	return build.substring(0, build.length()-1);
}

void setPath(String pubId) {
	log.info(&quot;PUB ID &quot; + pubId);
	String path = null;
	if(pubId.equals(&quot;18563&quot;)) {
		path = &quot;/adserver/inneractiveBidder&quot;;	
	} else if (pubId.equals(&quot;17542&quot;)) {
		path = &quot;/adserver/axonixBidder&quot;;		
	} else if (pubId.equals(&quot;18551&quot;)) {
		path = &quot;/adserver/mobfoxBidder&quot;;
	} else if (pubId.equals(&quot;19048&quot;)) {
		path = &quot;/adserver/unityBidder&quot;;	
	} else if (pubId.equals(&quot;19999&quot;)) {
	    path = &quot;/adserver/inMobiBidder&quot;;
	} else if (pubId.equals(&quot;19214&quot;)) {
		path = &quot;/adserver/smartyAdsBidder&quot;;
	} else if (pubId.equals(&quot;20051&quot;)) {
		path = &quot;/adserver/gothamAdsBidder&quot;;
	} else {
		path = &quot;/adserver/mobfoxBidder&quot;;
	}
	
	log.info(&quot;PATH :- &quot; + path);
	vars.put(&quot;url&quot;, path);
}

// done work perfect
String bannerStr() throws IOException {

	String banner_file_obj = FileUtils.readFileToString(new File(textBannerFile));
	
	banner_file_obj = banner_file_obj.replace(&quot;${banner_id}&quot;, uuId());
	banner_file_obj = banner_file_obj.replace(&quot;${topframe1}&quot;, topframe[ThreadLocalRandom.current().nextInt(0, topframe.length)]);
	banner_file_obj = banner_file_obj.replace(&quot;${pos1}&quot;, pos[ThreadLocalRandom.current().nextInt(0, pos.length)]);
	int random = ThreadLocalRandom.current().nextInt(0, battr.length);	
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${battr1_arr}]\&quot;&quot;, &quot;[&quot;+ arrayBuilder(Arrays.copyOfRange(battr, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${api1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(apiBanner, 0, apiBanner.length), false)+&quot;]&quot;);
	random = ThreadLocalRandom.current().nextInt(0, btype.length);
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${btype1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(btype, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	banner_file_obj = banner_file_obj.replace(&quot;${width}&quot;, vars.get(&quot;a_width&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${height}&quot;, vars.get(&quot;a_hight&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${wmin}&quot;, vars.get(&quot;wmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${hmin}&quot;, vars.get(&quot;hmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${cat_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;cat1_arr&quot;).split(cvsSplit), true)+&quot;]&quot;);

	return banner_file_obj;
}


// done work perfect
String siteStr() throws IOException {

	String site_file_obj = FileUtils.readFileToString(new File(textSiteFile));
	
	site_file_obj = site_file_obj.replace(&quot;${site_id1}&quot;, vars.get(&quot;site_id&quot;));
	String pub_id = vars.get(&quot;site_pub_id&quot;);
	setPath(pub_id);
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_id1}&quot;, pub_id);
	site_file_obj = site_file_obj.replace(&quot;\&quot;[${sitecat_arr1}]\&quot;&quot;,&quot;[&quot;+arrayBuilder(vars.get(&quot;sitecat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	site_file_obj = site_file_obj.replace(&quot;${site_keywords1}&quot;, vars.get(&quot;site_keywords&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_name1}&quot;, vars.get(&quot;site_pub_name&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_page1}&quot;, vars.get(&quot;site_page&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_domain1}&quot;, vars.get(&quot;site_domain&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_domain1}&quot;, vars.get(&quot;site_pub_domain&quot;));	
	
	return site_file_obj;
}

// done work perfect
String appStr() throws IOException {
	
	String app_file_obj = FileUtils.readFileToString(new File(textAPPFile));

	app_file_obj = app_file_obj.replace(&quot;${app_id1}&quot;, vars.get(&quot;app_id&quot;));
	String pub_id = vars.get(&quot;app_pub_id&quot;);
	setPath(pub_id);
	app_file_obj = app_file_obj.replace(&quot;${app_pub_id1}&quot;, pub_id);
	app_file_obj = app_file_obj.replace(&quot;\&quot;[${appcat_arr1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;appcat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	app_file_obj = app_file_obj.replace(&quot;${app_keywords1}&quot;, vars.get(&quot;app_keywords&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_bundle1}&quot;, vars.get(&quot;app_bundle&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_name1}&quot;, vars.get(&quot;app_name&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_storeurl1}&quot;, vars.get(&quot;app_storeurl&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_pub_name1}&quot;, vars.get(&quot;app_pub_name&quot;));
		
	return app_file_obj;
}

// done work perfect
String pmpStr() throws IOException {

	String pmp_file_obj = FileUtils.readFileToString(new File(textPMPFile));
	String deal_file_object = FileUtils.readFileToString(new File(textDealFile));
	
	pmp_file_obj = pmp_file_obj.replace(&quot;${private_auction1}&quot;, vars.get(&quot;private_auction&quot;));
	deal_file_object = deal_file_object.replace(&quot;${deals_id1}&quot;, vars.get(&quot;deals_id&quot;));
	deal_file_object = deal_file_object.replace(&quot;${at1}&quot;, at[ThreadLocalRandom.current().nextInt(0, at.length)]);
	deal_file_object = deal_file_object.replace(&quot;${bidfloor1}&quot;, vars.get(&quot;bidfloor&quot;));
	pmp_file_obj = pmp_file_obj.replace(&quot;%deals%&quot;, deal_file_object);
	return pmp_file_obj;
}

// done work perfect
String deviceStr() throws IOException {

	String device_file_obj = FileUtils.readFileToString(new File(textDeviceFile));

	device_file_obj = device_file_obj.replace(&quot;${connectiontype1}&quot;, connectiontype[ThreadLocalRandom.current().nextInt(0, connectiontype.length)]);
	device_file_obj = device_file_obj.replace(&quot;${js1}&quot;, js[ThreadLocalRandom.current().nextInt(0, js.length)]);
	device_file_obj = device_file_obj.replace(&quot;${language1}&quot;, language[ThreadLocalRandom.current().nextInt(0, language.length)]);
	device_file_obj = device_file_obj.replace(&quot;${type1}&quot;, type[ThreadLocalRandom.current().nextInt(0, type.length)]);
	device_file_obj = device_file_obj.replace(&quot;${dnt1}&quot;, dnt[ThreadLocalRandom.current().nextInt(0, dnt.length)]);
	if(carrier == &quot;null&quot;  || carrier == null) {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${carrier1}\&quot;&quot;, &quot;null&quot;);
	} else {
		device_file_obj = device_file_obj.replace(&quot;${carrier1}&quot;, carrier);
	}
	
	device_file_obj = device_file_obj.replace(&quot;\&quot;${ip1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;${country1}&quot;, vars.get(&quot;a_country&quot;));
	device_file_obj = device_file_obj.replace(&quot;\&quot;${region1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;\&quot;${city1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;${lat1}&quot;, vars.get(&quot;lattude&quot;));
	device_file_obj = device_file_obj.replace(&quot;${lon1}&quot;, vars.get(&quot;lontude&quot;));
	device_file_obj = device_file_obj.replace(&quot;\&quot;${zip1}\&quot;&quot;, &quot;null&quot;);
	String ifa = vars.get(&quot;ifa&quot;);
	device_file_obj = device_file_obj.replace(&quot;${ifa1}&quot;, ifa);
	device_file_obj = device_file_obj.replace(&quot;${dpisha1}&quot;, getSHA1MD5(ifa,true));
	device_file_obj = device_file_obj.replace(&quot;${dpidmd5}&quot;, getSHA1MD5(ifa,false));

	device_file_obj = device_file_obj.replace(&quot;${make1}&quot;, vars.get(&quot;make&quot;));
	device_file_obj = device_file_obj.replace(&quot;${model1}&quot;, vars.get(&quot;model&quot;));
	device_file_obj = device_file_obj.replace(&quot;${os1}&quot;, vars.get(&quot;os&quot;));
	device_file_obj = device_file_obj.replace(&quot;${devicetype1}&quot;, vars.get(&quot;devicetype&quot;));
	device_file_obj = device_file_obj.replace(&quot;${osv1}&quot;, vars.get(&quot;osv&quot;));
	device_file_obj = device_file_obj.replace(&quot;${ua1}&quot;, vars.get(&quot;ua&quot;));
	
	return device_file_obj;
}

// done work perfect
String getSHA1MD5(String ifa, boolean isSHA) {
	if (isSHA) {
		return DigestUtils.shaHex(ifa);
	} else {
		return DigestUtils.md5Hex(ifa);
	}
}

// done work perfect
String rtbStr() throws IOException {
	// replace all think and send
	String rtb_file_obj = FileUtils.readFileToString(new File(RTB_PATH));

	rtb_file_obj = rtb_file_obj.replace(&quot;${id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${imp_id1}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloor1}&quot;, bidfloor);
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloorcur1}&quot;, bidfloorcur);
	rtb_file_obj = rtb_file_obj.replace(&quot;${secure1}&quot;, secure[ThreadLocalRandom.current().nextInt(0, secure.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${instl1}&quot;, instl[ThreadLocalRandom.current().nextInt(0, instl.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${at1}&quot;, at[ThreadLocalRandom.current().nextInt(0, at.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${tmax1}&quot;, tmax);
	int random  = ThreadLocalRandom.current().nextInt(0, bcat.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${bcat1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(bcat, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	random  = ThreadLocalRandom.current().nextInt(0, badv.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${badv1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(badv, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	rtb_file_obj = rtb_file_obj.replace(&quot;${user_id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${gender1}&quot;, vars.get(&quot;gender&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${consent1}&quot;, consent[ThreadLocalRandom.current().nextInt(0, consent.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${yob1}&quot;,  vars.get(&quot;yob&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${coppa1}&quot;, coppa[ThreadLocalRandom.current().nextInt(0, coppa.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${gdpr1}&quot;, gdpr[ThreadLocalRandom.current().nextInt(0, gdpr.length)]);

	return rtb_file_obj;
}

// done work perfect
void requestCreate() {
	try {

		String mainRequest = rtbStr();
				
		mainRequest = mainRequest.replace(&quot;%%requestType%%&quot;,bannerStr());

		int requestPlace = getRequestPlace();
		if(requestPlace == 0) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,siteStr());
		} else if (requestPlace == 1) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,appStr());
		}

		mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, &quot;&quot;);
		mainRequest = mainRequest.replace(&quot;%%deviceType%%&quot;,deviceStr());

		log.info(&quot;&lt;========= Start ======&gt;&quot;);
		log.info(mainRequest);
		vars.put(&quot;index&quot;, mainRequest);
		log.info(&quot;&lt;========= End ======&gt;&quot;);
	} catch (Exception ex) {
		log.err(&quot;&lt;========= Error-Start ======&gt;&quot;);
		log.err(ex.getLocalizedMessage());
		log.err(&quot;&lt;========= Error-End ======&gt;&quot;);
	}
}


try {
    //your code here
    requestCreate();
} catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.jmeter.service.FileServer;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;
import net.sf.json.JSONArray;

try {
	
	FileOutputStream file = new FileOutputStream(vars.get(&quot;response_path&quot;)+&quot;/apibanner-response.csv&quot;,true);
	PrintStream printStream = new PrintStream(file);
	String com1 = vars.get(&quot;a_campainId&quot;);	
	String jsonSting = prev.getResponseDataAsString();
	String response = &quot;No-Match&quot;;
	if(jsonSting != null &amp;&amp; jsonSting.contains(&quot;bid&quot;)) {
		JSONObject jsonObject = new JSONObject();
		jsonObject = (JSONObject) JSONSerializer.toJSON(jsonSting);
		if (jsonObject.containsKey(&quot;bid&quot;)) {
		    JSONArray bidArr = jsonObject.getJSONArray(&quot;bid&quot;);
		    for (Iterator iter = bidArr.iterator(); iter.hasNext();) {
			   JSONObject campainObject = iter.next();
			   if(campainObject.containsKey(&quot;campaignId&quot;)) {
		    	  	String camapignId = campainObject.getString(&quot;campaignId&quot;);
		    	  	if(camapignId.equals(com1)) {
		    	  		response = camapignId;
		    	  		log.info(&quot;Json Reslult Match With CampignId :- &quot; + camapignId);
    	  				printStream.println(com1 + &quot;,&quot; + camapignId);
		    	  		break;
		    	  	} else {
		    	  		log.info(&quot;Json Reslult Not Match With CampignId :- &quot; + camapignId);
    	  			     printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
		    	  	}
		    	  }
			}		    
		}		
	} else {
		log.info(&quot;Json: &quot; + &quot;No Reslult&quot;);
		printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
	}
	vars.put(&quot;response&quot;, response);
	printStream.close();
	file.close();
} catch (Exception ex) {
	log.err(&quot;Error :- &quot; + ex.getLocalizedMessage());
}
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Banner-app-${a_width}-${a_hight}-${a_country}-${a_api}-${a_campainId}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${index}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${url}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.bid[*].campaignId</stringProp>
            <stringProp name="EXPECTED_VALUE">${a_campainId}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Banner-PMP-Function" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494566508000</longProp>
        <longProp name="ThreadGroup.end_time">1494566508000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">contentType</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-admaxim-mode</stringProp>
              <stringProp name="Header.value">dev</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Banner" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;
import org.apache.commons.io.FileUtils;
import java.util.Arrays;
import org.apache.commons.codec.digest.DigestUtils;


String carrier = null;
String cvsSplit = &quot;,&quot;;
String buildArray = &quot;|&quot;;
String openRtbSplit = &quot;=&quot;;
String patternRgex = &quot;^[a-z0-9]*_arr$&quot;;
String minduration = vars.get(&quot;minduration&quot;);
String sequence = vars.get(&quot;sequence&quot;);
String minbitrate = vars.get(&quot;minbitrate&quot;);
String maxbitrate = vars.get(&quot;maxbitrate&quot;);
String tmax = vars.get(&quot;tmax&quot;);
String bidfloor = vars.get(&quot;bidfloor&quot;);
String bidfloorcur = vars.get(&quot;bidfloorcur&quot;);
String imp_id =  vars.get(&quot;imp_idure&quot;);
String required = vars.get(&quot;required&quot;);
String data_length = vars.get(&quot;data_length&quot;);
String title_length = vars.get(&quot;title_length&quot;);
String img_w = vars.get(&quot;img_w&quot;);
String img_h = vars.get(&quot;img_h&quot;);
String[] battr = vars.get(&quot;battr&quot;).split(cvsSplit);
String[] topframe = vars.get(&quot;topframe&quot;).split(cvsSplit);
String[] btype = vars.get(&quot;btype&quot;).split(cvsSplit);
String[] apiVideo = vars.get(&quot;apiVideo&quot;).split(cvsSplit);
String[] apiBanner = vars.get(&quot;apiBanner&quot;).split(cvsSplit);
String[] pos = vars.get(&quot;pos&quot;).split(cvsSplit);
String[] protocols = vars.get(&quot;protocols&quot;).split(cvsSplit);
String[] mimes = vars.get(&quot;mimes&quot;).split(cvsSplit);
String[] linearity = vars.get(&quot;linearity&quot;).split(cvsSplit);
String[] startdelay = vars.get(&quot;startdelay&quot;).split(cvsSplit);
String[] placement = vars.get(&quot;placement&quot;).split(cvsSplit);
String[] skip = vars.get(&quot;skip&quot;).split(cvsSplit);
String[] maxduration = vars.get(&quot;maxduration&quot;).split(cvsSplit);
String[] maxextended = vars.get(&quot;maxextended&quot;).split(cvsSplit);
String[] playbackmethod = vars.get(&quot;playbackmethod&quot;).split(cvsSplit);
String[] delivery = vars.get(&quot;delivery&quot;).split(cvsSplit);
String[] boxingallowed = vars.get(&quot;boxingallowed&quot;).split(cvsSplit);
String[] dnt = vars.get(&quot;dnt&quot;).split(cvsSplit);
String[] consent = vars.get(&quot;consent&quot;).split(cvsSplit);
String[] gdpr = vars.get(&quot;gdpr&quot;).split(cvsSplit);
String[] coppa = vars.get(&quot;coppa&quot;).split(cvsSplit);
String[] gender = vars.get(&quot;gender&quot;).split(cvsSplit);
String[] connectiontype = vars.get(&quot;connectiontype&quot;).split(cvsSplit);
String[] js = vars.get(&quot;js&quot;).split(cvsSplit);
String[] bcat = vars.get(&quot;bcat&quot;).split(cvsSplit);
String[] badv = vars.get(&quot;badv&quot;).split(cvsSplit);
String[] language = vars.get(&quot;language&quot;).split(cvsSplit);
String[] type	= vars.get(&quot;type&quot;).split(cvsSplit);
String[] secure = vars.get(&quot;secure&quot;).split(cvsSplit);
String[] instl = vars.get(&quot;instl&quot;).split(cvsSplit);
String[] adunits = vars.get(&quot;adunits&quot;).split(cvsSplit);
String[] layout = vars.get(&quot;layout&quot;).split(cvsSplit);
String[] data_asset_type = vars.get(&quot;data_asset_type&quot;).split(cvsSplit);
String[] img_asset_type = vars.get(&quot;img_asset_type&quot;).split(cvsSplit);
//------------------------------------------
String TXT_PATH = vars.get(&quot;text_path&quot;);
String RTB_PATH = TXT_PATH+&quot;/rtb.txt&quot;;
String textBannerFile = TXT_PATH+&quot;/banner.txt&quot;;
String textSiteFile = TXT_PATH+&quot;/site.txt&quot;;
String textAPPFile = TXT_PATH+&quot;/app.txt&quot;;
String textPMPFile = TXT_PATH+&quot;/pmp.txt&quot;;
String textDealFile = TXT_PATH+&quot;/deal.txt&quot;;
String textDeviceFile = TXT_PATH+&quot;/device.txt&quot;;

String uuId() { return UUID.randomUUID().toString(); }

int getRequestPlace() { return ThreadLocalRandom.current().nextInt(0, 2); }

String arrayBuilder(String[] subArray, Boolean quotes) {
	StringBuilder build = new StringBuilder();
	for(int i=0; i&lt;subArray.length; i++) {
		if(quotes) { // \&quot; in
			build.append(&quot;\&quot;&quot;+subArray[i]+&quot;\&quot;&quot;).append(cvsSplit);
		} else {
			build.append(subArray[i]).append(cvsSplit);
		}
	}
	return build.substring(0, build.length()-1);
}

void setPath(String pubId) {
	log.info(&quot;PUB ID &quot; + pubId);
	String path = null;
	if(pubId.equals(&quot;18563&quot;)) {
		path = &quot;/adserver/inneractiveBidder&quot;;	
	} else if (pubId.equals(&quot;17542&quot;)) {
		path = &quot;/adserver/axonixBidder&quot;;		
	} else if (pubId.equals(&quot;18551&quot;)) {
		path = &quot;/adserver/mobfoxBidder&quot;;
	} else if (pubId.equals(&quot;19048&quot;)) {
		path = &quot;/adserver/unityBidder&quot;;	
	} else if (pubId.equals(&quot;19999&quot;)) {
	    path = &quot;/adserver/inMobiBidder&quot;;
	} else if (pubId.equals(&quot;19214&quot;)) {
		path = &quot;/adserver/smartyAdsBidder&quot;;
	} else if (pubId.equals(&quot;20051&quot;)) {
		path = &quot;/adserver/gothamAdsBidder&quot;;
	} else {
		path = &quot;/adserver/mobfoxBidder&quot;;
	}
	
	log.info(&quot;PATH :- &quot; + path);
	vars.put(&quot;url&quot;, path);
}

// done work perfect
String bannerStr() throws IOException {

	String banner_file_obj = FileUtils.readFileToString(new File(textBannerFile));
	
	banner_file_obj = banner_file_obj.replace(&quot;${banner_id}&quot;, uuId());
	banner_file_obj = banner_file_obj.replace(&quot;${topframe1}&quot;, topframe[ThreadLocalRandom.current().nextInt(0, topframe.length)]);
	banner_file_obj = banner_file_obj.replace(&quot;${pos1}&quot;, pos[ThreadLocalRandom.current().nextInt(0, pos.length)]);
	int random = ThreadLocalRandom.current().nextInt(0, battr.length);	
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${battr1_arr}]\&quot;&quot;, &quot;[&quot;+ arrayBuilder(Arrays.copyOfRange(battr, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	random = ThreadLocalRandom.current().nextInt(0, apiBanner.length);	
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${api1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(apiBanner, 0, random != 0 ? random : 2), false)+&quot;]&quot;);
	random = ThreadLocalRandom.current().nextInt(0, btype.length);
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${btype1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(btype, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	banner_file_obj = banner_file_obj.replace(&quot;${width}&quot;, vars.get(&quot;pmp_width&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${height}&quot;, vars.get(&quot;pmp_height&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${wmin}&quot;, vars.get(&quot;wmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${hmin}&quot;, vars.get(&quot;hmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${cat_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;cat1_arr&quot;).split(cvsSplit), true)+&quot;]&quot;);

	return banner_file_obj;
}

// done work perfect
String siteStr() throws IOException {

	String site_file_obj = FileUtils.readFileToString(new File(textSiteFile));
	
	site_file_obj = site_file_obj.replace(&quot;${site_id1}&quot;, vars.get(&quot;site_id&quot;));
	String pub_id = vars.get(&quot;site_pub_id&quot;);
	setPath(pub_id);
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_id1}&quot;, pub_id);
	site_file_obj = site_file_obj.replace(&quot;\&quot;[${sitecat_arr1}]\&quot;&quot;,&quot;[&quot;+arrayBuilder(vars.get(&quot;sitecat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	site_file_obj = site_file_obj.replace(&quot;${site_keywords1}&quot;, vars.get(&quot;site_keywords&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_name1}&quot;, vars.get(&quot;site_pub_name&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_page1}&quot;, vars.get(&quot;site_page&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_domain1}&quot;, vars.get(&quot;site_domain&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_domain1}&quot;, vars.get(&quot;site_pub_domain&quot;));	
	
	return site_file_obj;
}

// done work perfect
String appStr() throws IOException {
	
	String app_file_obj = FileUtils.readFileToString(new File(textAPPFile));

	app_file_obj = app_file_obj.replace(&quot;${app_id1}&quot;, vars.get(&quot;app_id&quot;));
	String pub_id = vars.get(&quot;app_pub_id&quot;);
	setPath(pub_id);
	app_file_obj = app_file_obj.replace(&quot;${app_pub_id1}&quot;, pub_id);
	app_file_obj = app_file_obj.replace(&quot;\&quot;[${appcat_arr1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;appcat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	app_file_obj = app_file_obj.replace(&quot;${app_keywords1}&quot;, vars.get(&quot;app_keywords&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_bundle1}&quot;, vars.get(&quot;app_bundle&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_name1}&quot;, vars.get(&quot;app_name&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_storeurl1}&quot;, vars.get(&quot;app_storeurl&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_pub_name1}&quot;, vars.get(&quot;app_pub_name&quot;));
		
	return app_file_obj;
}

// done work perfect
String pmpStr() throws IOException {
	
	String pmp_file_obj = FileUtils.readFileToString(new File(textPMPFile));
	String deal_file_object = FileUtils.readFileToString(new File(textDealFile));
	String deal_file_object2 = deal_file_object;

	pmp_file_obj = pmp_file_obj.replace(&quot;${private_auction1}&quot;, vars.get(&quot;pmp_private_auction&quot;));

	deal_file_object = deal_file_object.replace(&quot;${deals_id1}&quot;, vars.get(&quot;pmp_deal_id1&quot;));
	deal_file_object2 = deal_file_object2.replace(&quot;${deals_id1}&quot;, vars.get(&quot;pmp_deal_id2&quot;));

	deal_file_object = deal_file_object.replace(&quot;${at1}&quot;, vars.get(&quot;pmp_at&quot;));
	deal_file_object2 = deal_file_object2.replace(&quot;${at1}&quot;, vars.get(&quot;pmp_at&quot;));
	
	deal_file_object = deal_file_object.replace(&quot;${bidfloor1}&quot;, vars.get(&quot;pmp_bidfloor1&quot;));
	deal_file_object2 = deal_file_object2.replace(&quot;${bidfloor1}&quot;, vars.get(&quot;pmp_bidfloor2&quot;));
	
	pmp_file_obj = pmp_file_obj.replace(&quot;%deals%&quot;, deal_file_object+&quot;,&quot;+deal_file_object2);
	return pmp_file_obj;
}

// done work perfect
String deviceStr() throws IOException {

	String device_file_obj = FileUtils.readFileToString(new File(textDeviceFile));

	device_file_obj = device_file_obj.replace(&quot;${connectiontype1}&quot;, connectiontype[ThreadLocalRandom.current().nextInt(0, connectiontype.length)]);
	device_file_obj = device_file_obj.replace(&quot;${js1}&quot;, js[ThreadLocalRandom.current().nextInt(0, js.length)]);
	device_file_obj = device_file_obj.replace(&quot;${language1}&quot;, language[ThreadLocalRandom.current().nextInt(0, language.length)]);
	device_file_obj = device_file_obj.replace(&quot;${type1}&quot;, type[ThreadLocalRandom.current().nextInt(0, type.length)]);
	device_file_obj = device_file_obj.replace(&quot;${dnt1}&quot;, dnt[ThreadLocalRandom.current().nextInt(0, dnt.length)]);
	if(carrier == &quot;null&quot;  || carrier == null) {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${carrier1}\&quot;&quot;, &quot;null&quot;);
	} else {
		device_file_obj = device_file_obj.replace(&quot;${carrier1}&quot;, carrier);
	}
	
	device_file_obj = device_file_obj.replace(&quot;\&quot;${ip1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;${country1}&quot;, vars.get(&quot;country&quot;));
	device_file_obj = device_file_obj.replace(&quot;${region1}&quot;, vars.get(&quot;state&quot;));
	device_file_obj = device_file_obj.replace(&quot;${city1}&quot;, vars.get(&quot;city&quot;));
	device_file_obj = device_file_obj.replace(&quot;${lat1}&quot;, vars.get(&quot;lattude&quot;));
	device_file_obj = device_file_obj.replace(&quot;${lon1}&quot;, vars.get(&quot;lontude&quot;));
	device_file_obj = device_file_obj.replace(&quot;\&quot;${zip1}\&quot;&quot;, &quot;null&quot;);
	String ifa = vars.get(&quot;ifa&quot;);
	device_file_obj = device_file_obj.replace(&quot;${ifa1}&quot;, ifa);
	device_file_obj = device_file_obj.replace(&quot;${dpisha1}&quot;, getSHA1MD5(ifa,true));
	device_file_obj = device_file_obj.replace(&quot;${dpidmd5}&quot;, getSHA1MD5(ifa,false));

	device_file_obj = device_file_obj.replace(&quot;${make1}&quot;, vars.get(&quot;make&quot;));
	device_file_obj = device_file_obj.replace(&quot;${model1}&quot;, vars.get(&quot;model&quot;));
	device_file_obj = device_file_obj.replace(&quot;${os1}&quot;, vars.get(&quot;os&quot;));
	device_file_obj = device_file_obj.replace(&quot;${devicetype1}&quot;, vars.get(&quot;devicetype&quot;));
	device_file_obj = device_file_obj.replace(&quot;${osv1}&quot;, vars.get(&quot;osv&quot;));
	device_file_obj = device_file_obj.replace(&quot;${ua1}&quot;, vars.get(&quot;ua&quot;));
	
	return device_file_obj;
}

//,h1
// done work perfect
String getSHA1MD5(String ifa, boolean isSHA) {
	if (isSHA) {
		return DigestUtils.shaHex(ifa);
	} else {
		return DigestUtils.md5Hex(ifa);
	}
}

// done work perfect
String rtbStr() throws IOException {
	// replace all think and send
	String rtb_file_obj = FileUtils.readFileToString(new File(RTB_PATH));

	rtb_file_obj = rtb_file_obj.replace(&quot;${id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${imp_id1}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloor1}&quot;, bidfloor);
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloorcur1}&quot;, bidfloorcur);
	rtb_file_obj = rtb_file_obj.replace(&quot;${secure1}&quot;, secure[ThreadLocalRandom.current().nextInt(0, secure.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${instl1}&quot;, instl[ThreadLocalRandom.current().nextInt(0, instl.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${at1}&quot;, vars.get(&quot;pmp_at&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${tmax1}&quot;, tmax);
	int random  = ThreadLocalRandom.current().nextInt(0, bcat.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${bcat1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(bcat, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	random  = ThreadLocalRandom.current().nextInt(0, badv.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${badv1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(badv, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	rtb_file_obj = rtb_file_obj.replace(&quot;${user_id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${gender1}&quot;, vars.get(&quot;gender&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${consent1}&quot;, consent[ThreadLocalRandom.current().nextInt(0, consent.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${yob1}&quot;,  vars.get(&quot;yob&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${coppa1}&quot;, coppa[ThreadLocalRandom.current().nextInt(0, coppa.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${gdpr1}&quot;, gdpr[ThreadLocalRandom.current().nextInt(0, gdpr.length)]);

	return rtb_file_obj;
}

// done work perfect
void requestCreate() {
	try {

		String mainRequest = rtbStr();
		mainRequest = mainRequest.replace(&quot;%%requestType%%&quot;,bannerStr());
		int requestPlace = getRequestPlace();
		if(requestPlace == 0) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,siteStr());
		} else if (requestPlace == 1) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,appStr());
		}

	     int usePmp = getRequestPlace();
		if(usePmp == 1) {
			mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, pmpStr());
		} else {
		   mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, &quot;&quot;);			
		}

		mainRequest = mainRequest.replace(&quot;%%deviceType%%&quot;,deviceStr());

		log.info(&quot;&lt;========= Start ======&gt;&quot;);
		log.info(mainRequest);
		vars.put(&quot;index&quot;, mainRequest);
		log.info(&quot;&lt;========= End ======&gt;&quot;);
	} catch (Exception ex) {
		log.err(&quot;&lt;========= Error-Start ======&gt;&quot;);
		log.err(ex.getLocalizedMessage());
		log.err(&quot;&lt;========= Error-End ======&gt;&quot;);
	}
}


try {
    //your code here
    requestCreate();
} catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.jmeter.service.FileServer;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;
import net.sf.json.JSONArray;

try {
	
	FileOutputStream file = new FileOutputStream(vars.get(&quot;response_path&quot;)+&quot;/pmp-response.csv&quot;,true);
	PrintStream printStream = new PrintStream(file);
	String com1 = vars.get(&quot;pmp_campaignid&quot;);	
	String jsonSting = prev.getResponseDataAsString();
	String response = &quot;No-Match&quot;;
	if(jsonSting != null &amp;&amp; jsonSting.contains(&quot;bid&quot;)) {
		JSONObject jsonObject = new JSONObject();
		jsonObject = (JSONObject) JSONSerializer.toJSON(jsonSting);
		if (jsonObject.containsKey(&quot;bid&quot;)) {
		    JSONArray bidArr = jsonObject.getJSONArray(&quot;bid&quot;);
		    for (Iterator iter = bidArr.iterator(); iter.hasNext();) {
			   JSONObject campainObject = iter.next();
			   if(campainObject.containsKey(&quot;campaignId&quot;)) {
		    	  	String camapignId = campainObject.getString(&quot;campaignId&quot;);
		    	  	if(camapignId.equals(com1)) {
		    	  		response = camapignId;
		    	  		log.info(&quot;Json Reslult Match With CampignId :- &quot; + camapignId);
    	  				printStream.println(com1 + &quot;,&quot; + camapignId);
		    	  		break;
		    	  	} else {
		    	  		log.info(&quot;Json Reslult Not Match With CampignId :- &quot; + camapignId);
    	  			     printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
		    	  	}
		    	  }
			}		    
		}		
	} else {
		log.info(&quot;Json: &quot; + &quot;No Reslult&quot;);
		printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
	}
	vars.put(&quot;response&quot;, response);
	printStream.close();
	file.close();
} catch (Exception ex) {
	log.err(&quot;Error :- &quot; + ex.getLocalizedMessage());
}
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Banner-app-${pmp_private_auction}-${pmp_deal_id1}-${pmp_deal_id2}-${pmp_bidfloor1}-${pmp_bidfloor2}-${pmp_at}-${pmp_bidfloor}-${pmp_campaignid}-${pmp_width}-${pmp_height}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${index}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${url}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.bid[*].campaignId</stringProp>
            <stringProp name="EXPECTED_VALUE">${com1}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Banner-Pinpoint -Graphic" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494566508000</longProp>
        <longProp name="ThreadGroup.end_time">1494566508000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">contentType</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-admaxim-mode</stringProp>
              <stringProp name="Header.value">dev</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Banner" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;
import org.apache.commons.io.FileUtils;
import java.util.Arrays;
import org.apache.commons.codec.digest.DigestUtils;


String cvsSplit = &quot;,&quot;;
String buildArray = &quot;|&quot;;
String openRtbSplit = &quot;=&quot;;
String patternRgex = &quot;^[a-z0-9]*_arr$&quot;;
String minduration = vars.get(&quot;minduration&quot;);
String sequence = vars.get(&quot;sequence&quot;);
String minbitrate = vars.get(&quot;minbitrate&quot;);
String maxbitrate = vars.get(&quot;maxbitrate&quot;);
String tmax = vars.get(&quot;tmax&quot;);
String bidfloor = vars.get(&quot;bidfloor&quot;);
String bidfloorcur = vars.get(&quot;bidfloorcur&quot;);
String imp_id =  vars.get(&quot;imp_idure&quot;);
String required = vars.get(&quot;required&quot;);
String data_length = vars.get(&quot;data_length&quot;);
String title_length = vars.get(&quot;title_length&quot;);
String img_w = vars.get(&quot;img_w&quot;);
String img_h = vars.get(&quot;img_h&quot;);
String[] battr = vars.get(&quot;battr&quot;).split(cvsSplit);
String[] topframe = vars.get(&quot;topframe&quot;).split(cvsSplit);
String[] btype = vars.get(&quot;btype&quot;).split(cvsSplit);
String[] apiVideo = vars.get(&quot;apiVideo&quot;).split(cvsSplit);
String[] apiBanner = vars.get(&quot;apiBanner&quot;).split(cvsSplit);
String[] pos = vars.get(&quot;pos&quot;).split(cvsSplit);
String[] protocols = vars.get(&quot;protocols&quot;).split(cvsSplit);
String[] mimes = vars.get(&quot;mimes&quot;).split(cvsSplit);
String[] linearity = vars.get(&quot;linearity&quot;).split(cvsSplit);
String[] startdelay = vars.get(&quot;startdelay&quot;).split(cvsSplit);
String[] placement = vars.get(&quot;placement&quot;).split(cvsSplit);
String[] skip = vars.get(&quot;skip&quot;).split(cvsSplit);
String[] maxduration = vars.get(&quot;maxduration&quot;).split(cvsSplit);
String[] maxextended = vars.get(&quot;maxextended&quot;).split(cvsSplit);
String[] playbackmethod = vars.get(&quot;playbackmethod&quot;).split(cvsSplit);
String[] delivery = vars.get(&quot;delivery&quot;).split(cvsSplit);
String[] boxingallowed = vars.get(&quot;boxingallowed&quot;).split(cvsSplit);
String[] dnt = vars.get(&quot;dnt&quot;).split(cvsSplit);
String[] consent = vars.get(&quot;consent&quot;).split(cvsSplit);
String[] gdpr = vars.get(&quot;gdpr&quot;).split(cvsSplit);
String[] at = vars.get(&quot;at&quot;).split(cvsSplit);
String[] coppa = vars.get(&quot;coppa&quot;).split(cvsSplit);
String[] gender = vars.get(&quot;gender&quot;).split(cvsSplit);
String[] connectiontype = vars.get(&quot;connectiontype&quot;).split(cvsSplit);
String[] js = vars.get(&quot;js&quot;).split(cvsSplit);
String[] bcat = vars.get(&quot;bcat&quot;).split(cvsSplit);
String[] badv = vars.get(&quot;badv&quot;).split(cvsSplit);
String[] language = vars.get(&quot;language&quot;).split(cvsSplit);
String carrier = null;
String[] type	= vars.get(&quot;type&quot;).split(cvsSplit);
String[] secure = vars.get(&quot;secure&quot;).split(cvsSplit);
String[] instl = vars.get(&quot;instl&quot;).split(cvsSplit);
String[] adunits = vars.get(&quot;adunits&quot;).split(cvsSplit);
String[] layout = vars.get(&quot;layout&quot;).split(cvsSplit);
String[] data_asset_type = vars.get(&quot;data_asset_type&quot;).split(cvsSplit);
String[] img_asset_type = vars.get(&quot;img_asset_type&quot;).split(cvsSplit);
//------------------------------------------
String TXT_PATH = vars.get(&quot;text_path&quot;);
String RTB_PATH = TXT_PATH+&quot;/rtb.txt&quot;;
String textBannerFile = TXT_PATH+&quot;/banner.txt&quot;;
String textSiteFile = TXT_PATH+&quot;/site.txt&quot;;
String textAPPFile = TXT_PATH+&quot;/app.txt&quot;;
String textDeviceFile = TXT_PATH+&quot;/device.txt&quot;;

String uuId() { return UUID.randomUUID().toString(); }

int getRequestPlace() { return ThreadLocalRandom.current().nextInt(0, 2); }

String arrayBuilder(String[] subArray, Boolean quotes) {
	StringBuilder build = new StringBuilder();
	for(int i=0; i&lt;subArray.length; i++) {
		if(quotes) { // \&quot; in
			build.append(&quot;\&quot;&quot;+subArray[i]+&quot;\&quot;&quot;).append(cvsSplit);
		} else {
			build.append(subArray[i]).append(cvsSplit);
		}
	}
	return build.substring(0, build.length()-1);
}

void setPath(String pubId) {
	log.info(&quot;PUB ID &quot; + pubId);
	String path = null;

	if(pubId.equals(&quot;18563&quot;)) {
		path = &quot;/adserver/inneractiveBidder&quot;;	
	} else if (pubId.equals(&quot;17542&quot;)) {
		path = &quot;/adserver/axonixBidder&quot;;		
	} else if (pubId.equals(&quot;18551&quot;)) {
		path = &quot;/adserver/mobfoxBidder&quot;;
	} else if (pubId.equals(&quot;19048&quot;)) {
		path = &quot;/adserver/unityBidder&quot;;	
	} else if (pubId.equals(&quot;19999&quot;)) {
	    path = &quot;/adserver/inMobiBidder&quot;;
	} else if (pubId.equals(&quot;19214&quot;)) {
		path = &quot;/adserver/smartyAdsBidder&quot;;
	} else if (pubId.equals(&quot;20051&quot;)) {
		path = &quot;/adserver/gothamAdsBidder&quot;;
	} else {
		path = &quot;/adserver/mobfoxBidder&quot;;
	}
	
	log.info(&quot;PATH :- &quot; + path);
	vars.put(&quot;url&quot;, path);
}

// done work perfect
String bannerStr() throws IOException {

	String banner_file_obj = FileUtils.readFileToString(new File(textBannerFile));
	
	banner_file_obj = banner_file_obj.replace(&quot;${banner_id}&quot;, uuId());
	banner_file_obj = banner_file_obj.replace(&quot;${topframe1}&quot;, topframe[ThreadLocalRandom.current().nextInt(0, topframe.length)]);
	banner_file_obj = banner_file_obj.replace(&quot;${pos1}&quot;, pos[ThreadLocalRandom.current().nextInt(0, pos.length)]);
	int random = ThreadLocalRandom.current().nextInt(0, battr.length);	
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${battr1_arr}]\&quot;&quot;, &quot;[&quot;+ arrayBuilder(Arrays.copyOfRange(battr, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	random = ThreadLocalRandom.current().nextInt(0, apiBanner.length);	
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${api1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(apiBanner, 0, random != 0 ? random : 2), false)+&quot;]&quot;);
	random = ThreadLocalRandom.current().nextInt(0, btype.length);
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${btype1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(btype, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	banner_file_obj = banner_file_obj.replace(&quot;${width}&quot;, vars.get(&quot;pinpoint_width&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${height}&quot;, vars.get(&quot;pinpoint_hight&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${wmin}&quot;, vars.get(&quot;wmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;${hmin}&quot;, vars.get(&quot;hmin1&quot;));
	banner_file_obj = banner_file_obj.replace(&quot;\&quot;[${cat_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;cat1_arr&quot;).split(cvsSplit), true)+&quot;]&quot;);

	return banner_file_obj;
}

// done work perfect
String siteStr() throws IOException {

	String site_file_obj = FileUtils.readFileToString(new File(textSiteFile));
	
	site_file_obj = site_file_obj.replace(&quot;${site_id1}&quot;, vars.get(&quot;site_id&quot;));
	String pub_id = vars.get(&quot;site_pub_id&quot;);
	setPath(pub_id);
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_id1}&quot;, pub_id);
	site_file_obj = site_file_obj.replace(&quot;\&quot;[${sitecat_arr1}]\&quot;&quot;,&quot;[&quot;+arrayBuilder(vars.get(&quot;sitecat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	site_file_obj = site_file_obj.replace(&quot;${site_keywords1}&quot;, vars.get(&quot;site_keywords&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_name1}&quot;, vars.get(&quot;site_pub_name&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_page1}&quot;, vars.get(&quot;site_page&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_domain1}&quot;, vars.get(&quot;site_domain&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_domain1}&quot;, vars.get(&quot;site_pub_domain&quot;));	
	
	return site_file_obj;
}

// done work perfect
String appStr() throws IOException {
	
	String app_file_obj = FileUtils.readFileToString(new File(textAPPFile));

	app_file_obj = app_file_obj.replace(&quot;${app_id1}&quot;, vars.get(&quot;app_id&quot;));
	String pub_id = vars.get(&quot;app_pub_id&quot;);
	setPath(pub_id);
	app_file_obj = app_file_obj.replace(&quot;${app_pub_id1}&quot;, pub_id);
	app_file_obj = app_file_obj.replace(&quot;\&quot;[${appcat_arr1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;appcat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	app_file_obj = app_file_obj.replace(&quot;${app_keywords1}&quot;, vars.get(&quot;app_keywords&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_bundle1}&quot;, vars.get(&quot;app_bundle&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_name1}&quot;, vars.get(&quot;app_name&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_storeurl1}&quot;, vars.get(&quot;app_storeurl&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_pub_name1}&quot;, vars.get(&quot;app_pub_name&quot;));
		
	return app_file_obj;
}

// done work perfect
String deviceStr() throws IOException {

	String device_file_obj = FileUtils.readFileToString(new File(textDeviceFile));

	device_file_obj = device_file_obj.replace(&quot;${connectiontype1}&quot;, connectiontype[ThreadLocalRandom.current().nextInt(0, connectiontype.length)]);
	device_file_obj = device_file_obj.replace(&quot;${js1}&quot;, js[ThreadLocalRandom.current().nextInt(0, js.length)]);
	device_file_obj = device_file_obj.replace(&quot;${language1}&quot;, language[ThreadLocalRandom.current().nextInt(0, language.length)]);
	device_file_obj = device_file_obj.replace(&quot;${type1}&quot;, vars.get(&quot;pinpoint_geo_type&quot;));
	device_file_obj = device_file_obj.replace(&quot;${dnt1}&quot;, dnt[ThreadLocalRandom.current().nextInt(0, dnt.length)]);
	if(carrier == &quot;null&quot;  || carrier == null) {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${carrier1}\&quot;&quot;, &quot;null&quot;);
	} else {
		device_file_obj = device_file_obj.replace(&quot;${carrier1}&quot;, carrier);
	}
	
	device_file_obj = device_file_obj.replace(&quot;\&quot;${ip1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;${country1}&quot;, vars.get(&quot;pinpoint_country&quot;));
	device_file_obj = device_file_obj.replace(&quot;\&quot;${region1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;\&quot;${city1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;${lat1}&quot;, vars.get(&quot;pinpont_lat&quot;));
	device_file_obj = device_file_obj.replace(&quot;${lon1}&quot;, vars.get(&quot;pinpoint_lon&quot;));
	device_file_obj = device_file_obj.replace(&quot;\&quot;${zip1}\&quot;&quot;, &quot;null&quot;);
	String ifa = vars.get(&quot;ifa&quot;);
	device_file_obj = device_file_obj.replace(&quot;${ifa1}&quot;, ifa);
	device_file_obj = device_file_obj.replace(&quot;${dpisha1}&quot;, getSHA1MD5(ifa,true));
	device_file_obj = device_file_obj.replace(&quot;${dpidmd5}&quot;, getSHA1MD5(ifa,false));

	device_file_obj = device_file_obj.replace(&quot;${make1}&quot;, vars.get(&quot;make&quot;));
	device_file_obj = device_file_obj.replace(&quot;${model1}&quot;, vars.get(&quot;model&quot;));
	device_file_obj = device_file_obj.replace(&quot;${os1}&quot;, vars.get(&quot;os&quot;));
	device_file_obj = device_file_obj.replace(&quot;${devicetype1}&quot;, vars.get(&quot;devicetype&quot;));
	device_file_obj = device_file_obj.replace(&quot;${osv1}&quot;, vars.get(&quot;osv&quot;));
	device_file_obj = device_file_obj.replace(&quot;${ua1}&quot;, vars.get(&quot;ua&quot;));
	
	return device_file_obj;
}

//,h1
// done work perfect
String getSHA1MD5(String ifa, boolean isSHA) {
	if (isSHA) {
		return DigestUtils.shaHex(ifa);
	} else {
		return DigestUtils.md5Hex(ifa);
	}
}

// done work perfect
String rtbStr() throws IOException {
	// replace all think and send
	String rtb_file_obj = FileUtils.readFileToString(new File(RTB_PATH));

	rtb_file_obj = rtb_file_obj.replace(&quot;${id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${imp_id1}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloor1}&quot;, bidfloor);
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloorcur1}&quot;, bidfloorcur);
	rtb_file_obj = rtb_file_obj.replace(&quot;${secure1}&quot;, secure[ThreadLocalRandom.current().nextInt(0, secure.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${instl1}&quot;, instl[ThreadLocalRandom.current().nextInt(0, instl.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${at1}&quot;, at[ThreadLocalRandom.current().nextInt(0, at.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${tmax1}&quot;, tmax);
	int random  = ThreadLocalRandom.current().nextInt(0, bcat.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${bcat1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(bcat, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	random  = ThreadLocalRandom.current().nextInt(0, badv.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${badv1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(badv, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	rtb_file_obj = rtb_file_obj.replace(&quot;${user_id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${gender1}&quot;, vars.get(&quot;gender&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${consent1}&quot;, consent[ThreadLocalRandom.current().nextInt(0, consent.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${yob1}&quot;,  vars.get(&quot;yob&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${coppa1}&quot;, coppa[ThreadLocalRandom.current().nextInt(0, coppa.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${gdpr1}&quot;, gdpr[ThreadLocalRandom.current().nextInt(0, gdpr.length)]);

	return rtb_file_obj;
}

// done work perfect
void requestCreate() {
	try {

		String mainRequest = rtbStr();
		mainRequest = mainRequest.replace(&quot;%%requestType%%&quot;,bannerStr());
		int requestPlace = getRequestPlace();
		if(requestPlace == 0) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,siteStr());
		} else if (requestPlace == 1) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,appStr());
		}

		mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, &quot;&quot;);							
		mainRequest = mainRequest.replace(&quot;%%deviceType%%&quot;,deviceStr());

		log.info(&quot;&lt;========= Start ======&gt;&quot;);
		log.info(mainRequest);
		vars.put(&quot;index&quot;, mainRequest);
		log.info(&quot;&lt;========= End ======&gt;&quot;);
	} catch (Exception ex) {
		log.err(&quot;&lt;========= Error-Start ======&gt;&quot;);
		log.err(ex.getLocalizedMessage());
		log.err(&quot;&lt;========= Error-End ======&gt;&quot;);
	}
}


try {
    //your code here
    requestCreate();
} catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.io.File;
import org.apache.jmeter.service.FileServer;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;
import net.sf.json.JSONArray;

try {
	
	FileOutputStream file = new FileOutputStream(vars.get(&quot;response_path&quot;)+&quot;/pinpoint-response.csv&quot;,true);
	PrintStream printStream = new PrintStream(file);
	String com1 = vars.get(&quot;pinpoint_campaignid&quot;);	
	String jsonSting = prev.getResponseDataAsString();
	String response = &quot;No-Match&quot;;
	if(jsonSting != null &amp;&amp; jsonSting.contains(&quot;bid&quot;)) {
		JSONObject jsonObject = new JSONObject();
		jsonObject = (JSONObject) JSONSerializer.toJSON(jsonSting);
		if (jsonObject.containsKey(&quot;bid&quot;)) {
		    JSONArray bidArr = jsonObject.getJSONArray(&quot;bid&quot;);
		    for (Iterator iter = bidArr.iterator(); iter.hasNext();) {
			   JSONObject campainObject = iter.next();
			   if(campainObject.containsKey(&quot;campaignId&quot;)) {
		    	  	String camapignId = campainObject.getString(&quot;campaignId&quot;);
		    	  	if(camapignId.equals(com1)) {
		    	  		response = camapignId;
		    	  		log.info(&quot;Json Reslult Match With CampignId :- &quot; + camapignId);
    	  				printStream.println(com1 + &quot;,&quot; + camapignId);
		    	  		break;
		    	  	} else {
		    	  		log.info(&quot;Json Reslult Not Match With CampignId :- &quot; + camapignId);
    	  			     printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
		    	  	}
		    	  }
			}		    
		}		
	} else {
		log.info(&quot;Json: &quot; + &quot;No Reslult&quot;);
		printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
	}
	vars.put(&quot;response&quot;, response);
	printStream.close();
	file.close();
} catch (Exception ex) {
	log.err(&quot;Error :- &quot; + ex.getLocalizedMessage());
}
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Banner-app-${pinpoint_width}-${pinpoint_hight}-${pinpoint_country}-${pinpont_lat}-${pinpoint_lon}-${pinpoint_geo_type}-${pinpoint_radius}-${pinpoint_shape}-${pinpoint_campaignid}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${index}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${url}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.bid[*].campaignId</stringProp>
            <stringProp name="EXPECTED_VALUE">${pinpoint_campaignid}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Video-Rtb-Reqeust" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494566508000</longProp>
        <longProp name="ThreadGroup.end_time">1494566508000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">contentType</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-admaxim-mode</stringProp>
              <stringProp name="Header.value">dev</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Video" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import java.io.IOException;
import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;
import org.apache.commons.io.FileUtils;
import java.util.Arrays;
import org.apache.commons.codec.digest.DigestUtils;


String cvsSplit = &quot;,&quot;;
String buildArray = &quot;|&quot;;
String openRtbSplit = &quot;=&quot;;
String patternRgex = &quot;^[a-z0-9]*_arr$&quot;;
String[] battr = vars.get(&quot;battr&quot;).split(cvsSplit);
String[] topframe = vars.get(&quot;topframe&quot;).split(cvsSplit);
String[] btype = vars.get(&quot;btype&quot;).split(cvsSplit);
String[] apiVideo = vars.get(&quot;apiVideo&quot;).split(cvsSplit);
String[] apiBanner = vars.get(&quot;apiBanner&quot;).split(cvsSplit);
String[] pos = vars.get(&quot;pos&quot;).split(cvsSplit);
String[] protocols = vars.get(&quot;protocols&quot;).split(cvsSplit);
String sequence = vars.get(&quot;sequence&quot;);
String[] mimes = vars.get(&quot;mimes&quot;).split(cvsSplit);
String[] linearity = vars.get(&quot;linearity&quot;).split(cvsSplit);
String[] startdelay = vars.get(&quot;startdelay&quot;).split(cvsSplit);
String[] placement = vars.get(&quot;placement&quot;).split(cvsSplit);
String[] skip = vars.get(&quot;skip&quot;).split(cvsSplit);
String minduration = vars.get(&quot;minduration&quot;);
String[] maxduration = vars.get(&quot;maxduration&quot;).split(cvsSplit);
String[] maxextended = vars.get(&quot;maxextended&quot;).split(cvsSplit);
String[] playbackmethod = vars.get(&quot;playbackmethod&quot;).split(cvsSplit);
String[] delivery = vars.get(&quot;delivery&quot;).split(cvsSplit);
String minbitrate = vars.get(&quot;minbitrate&quot;);
String maxbitrate = vars.get(&quot;maxbitrate&quot;);
String[] boxingallowed = vars.get(&quot;boxingallowed&quot;).split(cvsSplit);
String[] dnt = vars.get(&quot;dnt&quot;).split(cvsSplit);
String[] consent = vars.get(&quot;consent&quot;).split(cvsSplit);
String[] gdpr = vars.get(&quot;gdpr&quot;).split(cvsSplit);
String[] at = vars.get(&quot;at&quot;).split(cvsSplit);
String tmax = vars.get(&quot;tmax&quot;);
String[] coppa = vars.get(&quot;coppa&quot;).split(cvsSplit);
String[] gender = vars.get(&quot;gender&quot;).split(cvsSplit);
String[] connectiontype = vars.get(&quot;connectiontype&quot;).split(cvsSplit);
String[] js = vars.get(&quot;js&quot;).split(cvsSplit);
String[] bcat = vars.get(&quot;bcat&quot;).split(cvsSplit);
String[] badv = vars.get(&quot;badv&quot;).split(cvsSplit);
String[] language = vars.get(&quot;language&quot;).split(cvsSplit);
String carrier = null;
String[] type	= vars.get(&quot;type&quot;).split(cvsSplit);
String imp_id =  vars.get(&quot;imp_idure&quot;);
String[] secure = vars.get(&quot;secure&quot;).split(cvsSplit);
String[] instl = vars.get(&quot;instl&quot;).split(cvsSplit);
String bidfloor = vars.get(&quot;bidfloor&quot;);
String bidfloorcur = vars.get(&quot;bidfloorcur&quot;);
String[] adunits = vars.get(&quot;adunits&quot;).split(cvsSplit);
String[] layout = vars.get(&quot;layout&quot;).split(cvsSplit);
String required = vars.get(&quot;required&quot;);
String[] data_asset_type = vars.get(&quot;data_asset_type&quot;).split(cvsSplit);
String data_length = vars.get(&quot;data_length&quot;);
String title_length = vars.get(&quot;title_length&quot;);
String[] img_asset_type = vars.get(&quot;img_asset_type&quot;).split(cvsSplit);
String img_w = vars.get(&quot;img_w&quot;);
String img_h = vars.get(&quot;img_h&quot;);
//------------------------------------------
String TXT_PATH = vars.get(&quot;text_path&quot;);
String RTB_PATH = TXT_PATH+&quot;/rtb.txt&quot;;
String textVideoFile = TXT_PATH+&quot;/video.txt&quot;;
String textSiteFile = TXT_PATH+&quot;/site.txt&quot;;
String textAPPFile = TXT_PATH+&quot;/app.txt&quot;;
String textDeviceFile = TXT_PATH+&quot;/device.txt&quot;;
String textCompanionFile = TXT_PATH+&quot;/companion.txt&quot;;
String textCompanionListFile = TXT_PATH+&quot;/companionlist.txt&quot;;

int[] requestType = {6,8,50};

String uuId() { return UUID.randomUUID().toString(); }

String arrayBuilder(String[] subArray, Boolean quotes) {
	StringBuilder build = new StringBuilder();
	for(int i=0; i&lt;subArray.length; i++) {
		if(quotes) { // \&quot; in
			build.append(&quot;\&quot;&quot;+subArray[i]+&quot;\&quot;&quot;).append(cvsSplit);
		} else {
			build.append(subArray[i]).append(cvsSplit);
		}
	}
	return build.substring(0, build.length()-1);
}

void setPath(String pubId) {
	log.info(&quot;PUB ID &quot; + pubId);
	String path = null;
	if(pubId.equals(&quot;18563&quot;)) {
		path = &quot;/adserver/inneractiveBidder&quot;;	
	} else if (pubId.equals(&quot;17542&quot;)) {
		path = &quot;/adserver/axonixBidder&quot;;		
	} else if (pubId.equals(&quot;18551&quot;)) {
		path = &quot;/adserver/mobfoxBidder&quot;;
	} else if (pubId.equals(&quot;19048&quot;)) {
		path = &quot;/adserver/unityBidder&quot;;	
	} else if (pubId.equals(&quot;19999&quot;)) {
	    path = &quot;/adserver/inMobiBidder&quot;;
	} else if (pubId.equals(&quot;19214&quot;)) {
		path = &quot;/adserver/smartyAdsBidder&quot;;
	} else if (pubId.equals(&quot;20051&quot;)) {
		path = &quot;/adserver/gothamAdsBidder&quot;;
	} else {
		path = &quot;/adserver/mobfoxBidder&quot;;
	}
	
	log.info(&quot;PATH :- &quot; + path);
	vars.put(&quot;url&quot;, path);
}

int getRequestType() { return requestType[ThreadLocalRandom.current().nextInt(0, requestType.length)]; }

int getRequestPlace() { return ThreadLocalRandom.current().nextInt(0, 2); }

// done work perfect
String videoStr() throws IOException {

	String video_file_obj = FileUtils.readFileToString(new File(textVideoFile));

	video_file_obj = video_file_obj.replace(&quot;${sequence1}&quot;, sequence);
	video_file_obj = video_file_obj.replace(&quot;${minduration1}&quot;, minduration);
	video_file_obj = video_file_obj.replace(&quot;${minbitrate1}&quot;, minbitrate);
	video_file_obj = video_file_obj.replace(&quot;${boxingallowed1}&quot;, boxingallowed[ThreadLocalRandom.current().nextInt(0, boxingallowed.length)]);
	video_file_obj = video_file_obj.replace(&quot;${startdelay1}&quot;, startdelay[ThreadLocalRandom.current().nextInt(0, startdelay.length)]);
	video_file_obj = video_file_obj.replace(&quot;${linearity1}&quot;, linearity[ThreadLocalRandom.current().nextInt(0, linearity.length)]);
	video_file_obj = video_file_obj.replace(&quot;${pos1}&quot;, pos[ThreadLocalRandom.current().nextInt(0, pos.length)]);
	video_file_obj = video_file_obj.replace(&quot;${maxbitrate1}&quot;, String.valueOf(ThreadLocalRandom.current().nextInt(0, 1500)));
	video_file_obj = video_file_obj.replace(&quot;${placement1}&quot;, placement[ThreadLocalRandom.current().nextInt(0, placement.length)]);
	video_file_obj = video_file_obj.replace(&quot;${maxextended1}&quot;, maxextended[ThreadLocalRandom.current().nextInt(0, maxextended.length)]);
	video_file_obj = video_file_obj.replace(&quot;${maxduration1}&quot;, &quot;&quot; + vars.get(&quot;video_duration&quot;));
	
	int random  = 	ThreadLocalRandom.current().nextInt(0, protocols.length);
	video_file_obj = video_file_obj.replace(&quot;\&quot;[${protocols1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(protocols, 0, random != 0 ? random : 2), false)+&quot;]&quot;);
	random  = ThreadLocalRandom.current().nextInt(0, delivery.length);
	video_file_obj = video_file_obj.replace(&quot;\&quot;[${delivery1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(delivery, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	random  = ThreadLocalRandom.current().nextInt(0, playbackmethod.length);
	video_file_obj = video_file_obj.replace(&quot;\&quot;[${playbackmethod1}]\&quot;&quot;,&quot;[&quot;+arrayBuilder(Arrays.copyOfRange(playbackmethod, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	random  = ThreadLocalRandom.current().nextInt(0, mimes.length);
	video_file_obj = video_file_obj.replace(&quot;\&quot;[${mimes1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(mimes, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	random = ThreadLocalRandom.current().nextInt(0, apiVideo.length);	
	video_file_obj = video_file_obj.replace(&quot;\&quot;[${api2_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(apiVideo, 0, random != 0 ? random : 2), false)+&quot;]&quot;);

	video_file_obj = video_file_obj.replace(&quot;${width1}&quot;, vars.get(&quot;video_width&quot;));
	video_file_obj = video_file_obj.replace(&quot;${height1}&quot;, vars.get(&quot;video_height&quot;));
	video_file_obj = video_file_obj.replace(&quot;%%companionadType%%&quot;, &quot;&quot;);

	return video_file_obj;
}

// done work perfect
String siteStr() throws IOException {

	String site_file_obj = FileUtils.readFileToString(new File(textSiteFile));
	
	site_file_obj = site_file_obj.replace(&quot;${site_id1}&quot;, vars.get(&quot;site_id&quot;));
	String pub_id = vars.get(&quot;site_pub_id&quot;);
	setPath(pub_id);
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_id1}&quot;, pub_id);
	site_file_obj = site_file_obj.replace(&quot;\&quot;[${sitecat_arr1}]\&quot;&quot;,&quot;[&quot;+arrayBuilder(vars.get(&quot;sitecat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	site_file_obj = site_file_obj.replace(&quot;${site_keywords1}&quot;, vars.get(&quot;site_keywords&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_name1}&quot;, vars.get(&quot;site_pub_name&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_page1}&quot;, vars.get(&quot;site_page&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_domain1}&quot;, vars.get(&quot;site_domain&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_domain1}&quot;, vars.get(&quot;site_pub_domain&quot;));	
	
	return site_file_obj;
}

// done work perfect
String appStr() throws IOException {

	String app_file_obj = FileUtils.readFileToString(new File(textAPPFile));

	app_file_obj = app_file_obj.replace(&quot;${app_id1}&quot;, vars.get(&quot;app_id&quot;));
	String pub_id = vars.get(&quot;app_pub_id&quot;);
	setPath(pub_id);
	app_file_obj = app_file_obj.replace(&quot;${app_pub_id1}&quot;, pub_id);
	app_file_obj = app_file_obj.replace(&quot;\&quot;[${appcat_arr1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;appcat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	app_file_obj = app_file_obj.replace(&quot;${app_keywords1}&quot;, vars.get(&quot;app_keywords&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_bundle1}&quot;, vars.get(&quot;app_bundle&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_name1}&quot;, vars.get(&quot;app_name&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_storeurl1}&quot;, vars.get(&quot;app_storeurl&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_pub_name1}&quot;, vars.get(&quot;app_pub_name&quot;));
		
	return app_file_obj;
}

// done work perfect
String deviceStr() throws IOException {

	String device_file_obj = FileUtils.readFileToString(new File(textDeviceFile));

	device_file_obj = device_file_obj.replace(&quot;${connectiontype1}&quot;, connectiontype[ThreadLocalRandom.current().nextInt(0, connectiontype.length)]);
	device_file_obj = device_file_obj.replace(&quot;${js1}&quot;, js[ThreadLocalRandom.current().nextInt(0, js.length)]);
	device_file_obj = device_file_obj.replace(&quot;${language1}&quot;, language[ThreadLocalRandom.current().nextInt(0, language.length)]);
	device_file_obj = device_file_obj.replace(&quot;${dnt1}&quot;, dnt[ThreadLocalRandom.current().nextInt(0, dnt.length)]);
	if(carrier == &quot;null&quot;  || carrier == null) {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${carrier1}\&quot;&quot;, &quot;null&quot;);
	} else {
		device_file_obj = device_file_obj.replace(&quot;${carrier1}&quot;, carrier);
	}
	
	device_file_obj = device_file_obj.replace(&quot;\&quot;${ip1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;${type1}&quot;, vars.get(&quot;video_type&quot;));
	device_file_obj = device_file_obj.replace(&quot;${country1}&quot;, vars.get(&quot;video_country&quot;));
	device_file_obj = device_file_obj.replace(&quot;\&quot;${region1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;\&quot;${city1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;\&quot;${zip1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;${lat1}&quot;, vars.get(&quot;video_lat&quot;));
	device_file_obj = device_file_obj.replace(&quot;${lon1}&quot;, vars.get(&quot;video_lon&quot;));
	String ifa = vars.get(&quot;ifa&quot;);
	device_file_obj = device_file_obj.replace(&quot;${ifa1}&quot;, ifa);
	device_file_obj = device_file_obj.replace(&quot;${dpisha1}&quot;, getSHA1MD5(ifa,true));
	device_file_obj = device_file_obj.replace(&quot;${dpidmd5}&quot;, getSHA1MD5(ifa,false));

	device_file_obj = device_file_obj.replace(&quot;${make1}&quot;, vars.get(&quot;make&quot;));
	device_file_obj = device_file_obj.replace(&quot;${model1}&quot;, vars.get(&quot;model&quot;));
	device_file_obj = device_file_obj.replace(&quot;${os1}&quot;, vars.get(&quot;os&quot;));
	device_file_obj = device_file_obj.replace(&quot;${devicetype1}&quot;, vars.get(&quot;devicetype&quot;));
	device_file_obj = device_file_obj.replace(&quot;${osv1}&quot;, vars.get(&quot;osv&quot;));
	device_file_obj = device_file_obj.replace(&quot;${ua1}&quot;, vars.get(&quot;ua&quot;));
	
	return device_file_obj;
}

// done work perfect
String rtbStr() throws IOException {
	// replace all think and send
	String rtb_file_obj = FileUtils.readFileToString(new File(RTB_PATH));

	rtb_file_obj = rtb_file_obj.replace(&quot;${id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${imp_id1}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloor1}&quot;, bidfloor);
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloorcur1}&quot;, bidfloorcur);
	rtb_file_obj = rtb_file_obj.replace(&quot;${secure1}&quot;, secure[ThreadLocalRandom.current().nextInt(0, secure.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${instl1}&quot;, instl[ThreadLocalRandom.current().nextInt(0, instl.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${at1}&quot;, at[ThreadLocalRandom.current().nextInt(0, at.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${tmax1}&quot;, tmax);
	int random  = ThreadLocalRandom.current().nextInt(0, bcat.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${bcat1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(bcat, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	random  = ThreadLocalRandom.current().nextInt(0, badv.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${badv1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(badv, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	rtb_file_obj = rtb_file_obj.replace(&quot;${user_id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${gender1}&quot;, gender[ThreadLocalRandom.current().nextInt(0, gender.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${consent1}&quot;, consent[ThreadLocalRandom.current().nextInt(0, consent.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${yob1}&quot;,  vars.get(&quot;yob&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${coppa1}&quot;, coppa[ThreadLocalRandom.current().nextInt(0, coppa.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${gdpr1}&quot;, gdpr[ThreadLocalRandom.current().nextInt(0, gdpr.length)]);

	return rtb_file_obj;
}

// done work perfect
String getSHA1MD5(String ifa, boolean isSHA) {
	if (isSHA) {
		return DigestUtils.shaHex(ifa);
	} else {
		return DigestUtils.md5Hex(ifa);
	}
}

// done work perfect
void requestCreate() {
	try {

		String mainRequest = rtbStr();
		mainRequest = mainRequest.replace(&quot;%%requestType%%&quot;,videoStr());
		int requestPlace = getRequestPlace();
		if(requestPlace == 0) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,siteStr());
		} else if (requestPlace == 1) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,appStr());
		}

		mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, &quot;&quot;);
		mainRequest = mainRequest.replace(&quot;%%deviceType%%&quot;,deviceStr());

		log.info(&quot;&lt;========= Start ======&gt;&quot;);
		log.info(mainRequest);
		vars.put(&quot;index&quot;, mainRequest);
		log.info(&quot;&lt;========= End ======&gt;&quot;);
	} catch (Exception ex) {
		log.err(&quot;&lt;========= Error-Start ======&gt;&quot;);
		log.err(ex.getLocalizedMessage());
		log.err(&quot;&lt;========= Error-End ======&gt;&quot;);
	}
}


try {
    //your code here
    requestCreate();
} catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Video PostProcessor" enabled="false">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.jmeter.service.FileServer;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;
import net.sf.json.JSONArray;

try {
	
	FileOutputStream file = new FileOutputStream(vars.get(&quot;response_path&quot;)+&quot;/demographic-response.csv&quot;,true);
	PrintStream printStream = new PrintStream(file);
	String com1 = vars.get(&quot;com1&quot;);	
	String jsonSting = prev.getResponseDataAsString();
	String response = &quot;No-Match&quot;;
	if(jsonSting != null &amp;&amp; jsonSting.contains(&quot;bid&quot;)) {
		JSONObject jsonObject = new JSONObject();
		jsonObject = (JSONObject) JSONSerializer.toJSON(jsonSting);
		if (jsonObject.containsKey(&quot;bid&quot;)) {
		    JSONArray bidArr = jsonObject.getJSONArray(&quot;bid&quot;);
		    for (Iterator iter = bidArr.iterator(); iter.hasNext();) {
			   JSONObject campainObject = iter.next();
			   if(campainObject.containsKey(&quot;campaignId&quot;)) {
		    	  	String camapignId = campainObject.getString(&quot;campaignId&quot;);
		    	  	if(camapignId.equals(com1)) {
		    	  		response = camapignId;
		    	  		log.info(&quot;Json Reslult Match With CampignId :- &quot; + camapignId);
    	  				printStream.println(com1 + &quot;,&quot; + camapignId);
		    	  		break;
		    	  	} else {
		    	  		log.info(&quot;Json Reslult Not Match With CampignId :- &quot; + camapignId);
    	  			     printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
		    	  	}
		    	  }
			}		    
		}		
	} else {
		log.info(&quot;Json: &quot; + &quot;No Reslult&quot;);
		printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
	}
	vars.put(&quot;response&quot;, response);
	printStream.close();
	file.close();
} catch (Exception ex) {
	log.err(&quot;Error :- &quot; + ex.getLocalizedMessage());
}
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Video-app-${video_width}-${video_height}-${video_duration}-${video_country}-${video_lat}-${video_lon}-${video_type} " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${index}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${url}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="false">
            <stringProp name="JSON_PATH">$.bid[*].campaignId</stringProp>
            <stringProp name="EXPECTED_VALUE">${com1}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Native-Rtb-Reqeust" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494566508000</longProp>
        <longProp name="ThreadGroup.end_time">1494566508000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">contentType</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">x-admaxim-mode</stringProp>
              <stringProp name="Header.value">dev</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Native-Pre-Processoor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.util.UUID;
import java.util.concurrent.ThreadLocalRandom;
import org.apache.commons.io.FileUtils;
import java.util.Arrays;
import org.apache.commons.codec.digest.DigestUtils;


String cvsSplit = &quot;,&quot;;
String buildArray = &quot;|&quot;;
String openRtbSplit = &quot;=&quot;;
String patternRgex = &quot;^[a-z0-9]*_arr$&quot;;
String[] battr = vars.get(&quot;battr&quot;).split(cvsSplit);
String[] topframe = vars.get(&quot;topframe&quot;).split(cvsSplit);
String[] btype = vars.get(&quot;btype&quot;).split(cvsSplit);
String[] apiVideo = vars.get(&quot;apiVideo&quot;).split(cvsSplit);
String[] apiBanner = vars.get(&quot;apiBanner&quot;).split(cvsSplit);
String[] pos = vars.get(&quot;pos&quot;).split(cvsSplit);
String[] protocols = vars.get(&quot;protocols&quot;).split(cvsSplit);
String sequence = vars.get(&quot;sequence&quot;);
String[] mimes = vars.get(&quot;mimes&quot;).split(cvsSplit);
String[] linearity = vars.get(&quot;linearity&quot;).split(cvsSplit);
String[] startdelay = vars.get(&quot;startdelay&quot;).split(cvsSplit);
String[] placement = vars.get(&quot;placement&quot;).split(cvsSplit);
String[] skip = vars.get(&quot;skip&quot;).split(cvsSplit);
String minduration = vars.get(&quot;minduration&quot;);
String[] maxduration = vars.get(&quot;maxduration&quot;).split(cvsSplit);
String[] maxextended = vars.get(&quot;maxextended&quot;).split(cvsSplit);
String[] playbackmethod = vars.get(&quot;playbackmethod&quot;).split(cvsSplit);
String[] delivery = vars.get(&quot;delivery&quot;).split(cvsSplit);
String minbitrate = vars.get(&quot;minbitrate&quot;);
String maxbitrate = vars.get(&quot;maxbitrate&quot;);
String[] boxingallowed = vars.get(&quot;boxingallowed&quot;).split(cvsSplit);
String[] dnt = vars.get(&quot;dnt&quot;).split(cvsSplit);
String[] consent = vars.get(&quot;consent&quot;).split(cvsSplit);
String[] gdpr = vars.get(&quot;gdpr&quot;).split(cvsSplit);
String[] at = vars.get(&quot;at&quot;).split(cvsSplit);
String tmax = vars.get(&quot;tmax&quot;);
String[] coppa = vars.get(&quot;coppa&quot;).split(cvsSplit);
String[] gender = vars.get(&quot;gender&quot;).split(cvsSplit);
String[] connectiontype = vars.get(&quot;connectiontype&quot;).split(cvsSplit);
String[] js = vars.get(&quot;js&quot;).split(cvsSplit);
String[] bcat = vars.get(&quot;bcat&quot;).split(cvsSplit);
String[] badv = vars.get(&quot;badv&quot;).split(cvsSplit);
String[] language = vars.get(&quot;language&quot;).split(cvsSplit);
String carrier = null;
String[] type	= vars.get(&quot;type&quot;).split(cvsSplit);
String imp_id =  vars.get(&quot;imp_idure&quot;);
String[] secure = vars.get(&quot;secure&quot;).split(cvsSplit);
String[] instl = vars.get(&quot;instl&quot;).split(cvsSplit);
String bidfloor = vars.get(&quot;bidfloor&quot;);
String bidfloorcur = vars.get(&quot;bidfloorcur&quot;);
String[] adunits = vars.get(&quot;adunits&quot;).split(cvsSplit);
String[] layout = vars.get(&quot;layout&quot;).split(cvsSplit);
String required = vars.get(&quot;required&quot;);
String[] data_asset_type = vars.get(&quot;data_asset_type&quot;).split(cvsSplit);
String data_length = vars.get(&quot;data_length&quot;);
String title_length = vars.get(&quot;title_length&quot;);
String[] img_asset_type = vars.get(&quot;img_asset_type&quot;).split(cvsSplit);
String img_w = vars.get(&quot;img_w&quot;);
String img_h = vars.get(&quot;img_h&quot;);
//------------------------------------------
String TXT_PATH = vars.get(&quot;text_path&quot;);
String RTB_PATH = TXT_PATH+&quot;/rtb.txt&quot;;
String textSiteFile = TXT_PATH+&quot;/site.txt&quot;;
String textAPPFile = TXT_PATH+&quot;/app.txt&quot;;
String textPMPFile = TXT_PATH+&quot;/pmp.txt&quot;;
String textDeviceFile = TXT_PATH+&quot;/device.txt&quot;;
String textNativeVideoFile = TXT_PATH+&quot;/native_video.txt&quot;;
String textNativeBannerFile = TXT_PATH+&quot;/native_banner.txt&quot;;
String textNativeDataFile = TXT_PATH+&quot;/ndata.txt&quot;;
String textNativeImageFile = TXT_PATH+&quot;/nimage.txt&quot;;
String textNativeVideoTFile = TXT_PATH+&quot;/nvideo.txt&quot;;

String uuId() { return UUID.randomUUID().toString(); }

String arrayBuilder(String[] subArray, Boolean quotes) {
	StringBuilder build = new StringBuilder();
	for(int i=0; i&lt;subArray.length; i++) {
		if(quotes) { 
			build.append(&quot;\&quot;&quot;+subArray[i]+&quot;\&quot;&quot;).append(cvsSplit);
		} else {
			build.append(subArray[i]).append(cvsSplit);
		}
	}
	return build.substring(0, build.length()-1);
}

void setPath(String pubId) {
	log.info(&quot;PUB ID &quot; + pubId);
	String path = null;
	if(pubId.equals(&quot;18563&quot;)) {
		path = &quot;/adserver/inneractiveBidder&quot;;	
	} else if (pubId.equals(&quot;18551&quot;)) {
		path = &quot;/adserver/mobfoxBidder&quot;;
	} else if (pubId.equals(&quot;19999&quot;)) {
		path = &quot;/adserver/inMobiBidder&quot;;
	} else if (pubId.equals(&quot;19214&quot;)) {
		path = &quot;/adserver/smartyAdsBidder&quot;;
	} else if (pubId.equals(&quot;20051&quot;)) {
		path = &quot;/adserver/gothamAdsBidder&quot;;
	} else {
		path = &quot;/adserver/mobfoxBidder&quot;;
	}

	path = &quot;/adserver/inMobiBidder&quot;;
	
	log.info(&quot;PATH :- &quot; + path);
	vars.put(&quot;url&quot;, path);
}

int getRequestPlace() { return ThreadLocalRandom.current().nextInt(0, 2); }


String nativeStr() throws IOException {

	String native_file_request = &quot;&quot;;
	int random = 0;
	int nativeChoice = getRequestPlace();
	if(nativeChoice == 1) {

		native_file_request = FileUtils.readFileToString(new File(textNativeVideoFile));
		
		native_file_request = native_file_request;
		native_file_request = native_file_request.replace(&quot;\&quot;${id}\&quot;&quot;, &quot;2&quot;).replace(&quot;\&quot;${img_type}\&quot;&quot;, vars.get(&quot;natv_ba_img_type&quot;)).
		replace(&quot;\&quot;${required1}\&quot;&quot;, &quot;0&quot;).replace(&quot;\&quot;${wmin}\&quot;&quot;, &quot;1&quot;).replace(&quot;\&quot;${hmin}\&quot;&quot;, &quot;1&quot;);

		native_video_request = FileUtils.readFileToString(new File(textNativeVideoTFile));
		native_file_request = native_file_request.replace(&quot;%video%&quot;, native_video_request);
			
	} else {
		native_file_request = FileUtils.readFileToString(new File(textNativeBannerFile));
		random = ThreadLocalRandom.current().nextInt(0, apiBanner.length);
		
		native_file_request = native_file_request.replace(&quot;\&quot;[${api1_arr}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(apiBanner, 0, random != 0 ? random : 2), false)+&quot;]&quot;);
		native_file_request = native_file_request.replace(&quot;\&quot;${adunit}\&quot;&quot;, adunits[ThreadLocalRandom.current().nextInt(0, adunits.length)]);

		//
	
		String image = FileUtils.readFileToString(new File(textNativeImageFile));		

		// image type 3
		String image3 = image;
		image3 = image3.replace(&quot;\&quot;${id}\&quot;&quot;, &quot;1&quot;).replace(&quot;\&quot;${required1}\&quot;&quot;, &quot;1&quot;).replace(&quot;\&quot;${img_type}\&quot;&quot;, &quot;3&quot;).
		replace(&quot;\&quot;${wmin}\&quot;&quot;, img_w).replace(&quot;\&quot;${hmin}\&quot;&quot;, img_h);

		// image type 1|2
		String image2 = image;
		image2 = image2.replace(&quot;\&quot;${id}\&quot;&quot;, &quot;2&quot;).replace(&quot;\&quot;${img_type}\&quot;&quot;, vars.get(&quot;natv_ba_img_type&quot;)).
		replace(&quot;\&quot;${required1}\&quot;&quot;, vars.get(&quot;natv_ba_required&quot;)).replace(&quot;\&quot;${wmin}\&quot;&quot;, vars.get(&quot;natv_ba_wmin&quot;)).
		replace(&quot;\&quot;${hmin}\&quot;&quot;, vars.get(&quot;natv_ba_hmin&quot;));
		
		native_file_request = native_file_request.replace(&quot;%images%&quot;, image2+&quot;,&quot;+image3);
	}

	native_file_request = native_file_request.replace(&quot;\&quot;${assets_id1}\&quot;&quot;, &quot;1&quot;).
	replace(&quot;\&quot;${required1}\&quot;&quot;, &quot;1&quot;).replace(&quot;\&quot;${title_len}\&quot;&quot;, title_length);

	// 1,2,11,12 compulsary
	String data = FileUtils.readFileToString(new File(textNativeDataFile));
	StringBuilder builder = new StringBuilder();
	for(int i=0; i&lt;data_asset_type.length; i++) {
		String dataFill = data;
		String len = null;
		if(data_asset_type[i].equals(&quot;1&quot;)) {
			len = &quot;70&quot;;
		} else if (data_asset_type[i].equals(&quot;2&quot;)) {
			len =  &quot;300&quot;;
		} else if(data_asset_type[i].equals(&quot;11&quot;)) {
			len = &quot;1000&quot;;
		} else if(data_asset_type[i].equals(&quot;12&quot;)) {
			len = &quot;255&quot;;
		}
		dataFill = dataFill.replace(&quot;\&quot;${id1}\&quot;&quot;, &quot;&quot;+(i+1)).
		replace(&quot;\&quot;${required1}\&quot;&quot;, &quot;1&quot;).
		replace(&quot;\&quot;${data_type}\&quot;&quot;,data_asset_type[i]).
		replace(&quot;\&quot;${data_len}\&quot;&quot;, len);
		
		builder.append(dataFill);
	}

	native_file_request = native_file_request.replace(&quot;%data%&quot;, builder);
	native_file_request = native_file_request.replace(&quot;\&quot;${request_layout}\&quot;&quot;,	layout[ThreadLocalRandom.current().nextInt(0, layout.length)]);
	random = ThreadLocalRandom.current().nextInt(0, battr.length);
	native_file_request = native_file_request.replace(&quot;\&quot;[${battr1_arr}]\&quot;&quot;, &quot;[&quot;+ arrayBuilder(Arrays.copyOfRange(battr, 0, random != 0 ? random : 1), false)+&quot;]&quot;);
	native_file_request = native_file_request.replace(&quot;\&quot;${ver1}\&quot;&quot;, &quot;1.0&quot;);	
	
	return native_file_request;
}


// done work perfect
String siteStr() throws IOException {

	String site_file_obj = FileUtils.readFileToString(new File(textSiteFile));
	
	site_file_obj = site_file_obj.replace(&quot;${site_id1}&quot;, vars.get(&quot;site_id&quot;));
	String pub_id = vars.get(&quot;site_pub_id&quot;);
	setPath(pub_id);
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_id1}&quot;, pub_id);
	site_file_obj = site_file_obj.replace(&quot;\&quot;[${sitecat_arr1}]\&quot;&quot;,&quot;[&quot;+arrayBuilder(vars.get(&quot;sitecat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	site_file_obj = site_file_obj.replace(&quot;${site_keywords1}&quot;, vars.get(&quot;site_keywords&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_name1}&quot;, vars.get(&quot;site_pub_name&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_page1}&quot;, vars.get(&quot;site_page&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_domain1}&quot;, vars.get(&quot;site_domain&quot;));
	site_file_obj = site_file_obj.replace(&quot;${site_publisher_domain1}&quot;, vars.get(&quot;site_pub_domain&quot;));	
	
	return site_file_obj;
}

// done work perfect
String appStr() throws IOException {
	
	String app_file_obj = FileUtils.readFileToString(new File(textAPPFile));

	app_file_obj = app_file_obj.replace(&quot;${app_id1}&quot;, vars.get(&quot;app_id&quot;));
	String pub_id = vars.get(&quot;app_pub_id&quot;);
	setPath(pub_id);
	app_file_obj = app_file_obj.replace(&quot;${app_pub_id1}&quot;, pub_id);
	app_file_obj = app_file_obj.replace(&quot;\&quot;[${appcat_arr1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(vars.get(&quot;appcat_arr&quot;).toUpperCase().split(cvsSplit), true)+&quot;]&quot;);
	app_file_obj = app_file_obj.replace(&quot;${app_keywords1}&quot;, vars.get(&quot;app_keywords&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_bundle1}&quot;, vars.get(&quot;app_bundle&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_name1}&quot;, vars.get(&quot;app_name&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_storeurl1}&quot;, vars.get(&quot;app_storeurl&quot;));
	app_file_obj = app_file_obj.replace(&quot;${app_pub_name1}&quot;, vars.get(&quot;app_pub_name&quot;));
		
	return app_file_obj;
}

// done work perfect
String deviceStr() throws IOException {

	String device_file_obj = FileUtils.readFileToString(new File(textDeviceFile));

	device_file_obj = device_file_obj.replace(&quot;${connectiontype1}&quot;, connectiontype[ThreadLocalRandom.current().nextInt(0, connectiontype.length)]);
	device_file_obj = device_file_obj.replace(&quot;${js1}&quot;, js[ThreadLocalRandom.current().nextInt(0, js.length)]);
	device_file_obj = device_file_obj.replace(&quot;${language1}&quot;, language[ThreadLocalRandom.current().nextInt(0, language.length)]);
	device_file_obj = device_file_obj.replace(&quot;${type1}&quot;, type[ThreadLocalRandom.current().nextInt(0, type.length)]);
	device_file_obj = device_file_obj.replace(&quot;${dnt1}&quot;, dnt[ThreadLocalRandom.current().nextInt(0, dnt.length)]);
	if(carrier == &quot;null&quot;  || carrier == null) {
		device_file_obj = device_file_obj.replace(&quot;\&quot;${carrier1}\&quot;&quot;, &quot;null&quot;);
	} else {
		device_file_obj = device_file_obj.replace(&quot;${carrier1}&quot;, carrier);
	}
	
	device_file_obj = device_file_obj.replace(&quot;\&quot;${ip1}\&quot;&quot;, &quot;null&quot;);
	device_file_obj = device_file_obj.replace(&quot;${country1}&quot;, vars.get(&quot;country&quot;));
	device_file_obj = device_file_obj.replace(&quot;${region1}&quot;, vars.get(&quot;state&quot;));
	device_file_obj = device_file_obj.replace(&quot;${city1}&quot;, vars.get(&quot;city&quot;));
	device_file_obj = device_file_obj.replace(&quot;${lat1}&quot;, vars.get(&quot;lattude&quot;));
	device_file_obj = device_file_obj.replace(&quot;${lon1}&quot;, vars.get(&quot;lontude&quot;));
	device_file_obj = device_file_obj.replace(&quot;\&quot;${zip1}\&quot;&quot;, &quot;null&quot;);
	String ifa = vars.get(&quot;ifa&quot;);
	device_file_obj = device_file_obj.replace(&quot;${ifa1}&quot;, ifa);
	device_file_obj = device_file_obj.replace(&quot;${dpisha1}&quot;, getSHA1MD5(ifa,true));
	device_file_obj = device_file_obj.replace(&quot;${dpidmd5}&quot;, getSHA1MD5(ifa,false));

	device_file_obj = device_file_obj.replace(&quot;${make1}&quot;, vars.get(&quot;make&quot;));
	device_file_obj = device_file_obj.replace(&quot;${model1}&quot;, vars.get(&quot;model&quot;));
	device_file_obj = device_file_obj.replace(&quot;${os1}&quot;, vars.get(&quot;os&quot;));
	device_file_obj = device_file_obj.replace(&quot;${devicetype1}&quot;, vars.get(&quot;devicetype&quot;));
	device_file_obj = device_file_obj.replace(&quot;${osv1}&quot;, vars.get(&quot;osv&quot;));
	device_file_obj = device_file_obj.replace(&quot;${ua1}&quot;, vars.get(&quot;ua&quot;));
	
	return device_file_obj;
}

// done work perfect
String getSHA1MD5(String ifa, boolean isSHA) {
	if (isSHA) {
		return DigestUtils.shaHex(ifa);
	} else {
		return DigestUtils.md5Hex(ifa);
	}
}

// done work perfect
String rtbStr() throws IOException {

	String rtb_file_obj = FileUtils.readFileToString(new File(RTB_PATH));

	rtb_file_obj = rtb_file_obj.replace(&quot;${id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${imp_id1}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloor1}&quot;, bidfloor);
	rtb_file_obj = rtb_file_obj.replace(&quot;${bidfloorcur1}&quot;, bidfloorcur);
	rtb_file_obj = rtb_file_obj.replace(&quot;${secure1}&quot;, secure[ThreadLocalRandom.current().nextInt(0, secure.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${instl1}&quot;, instl[ThreadLocalRandom.current().nextInt(0, instl.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${at1}&quot;, at[ThreadLocalRandom.current().nextInt(0, at.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${tmax1}&quot;, tmax);
	int random  = ThreadLocalRandom.current().nextInt(0, bcat.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${bcat1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(bcat, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	random  = ThreadLocalRandom.current().nextInt(0, badv.length);
	rtb_file_obj = rtb_file_obj.replace(&quot;\&quot;[${badv1}]\&quot;&quot;, &quot;[&quot;+arrayBuilder(Arrays.copyOfRange(badv, 0, random != 0 ? random : 1), true)+&quot;]&quot;);
	rtb_file_obj = rtb_file_obj.replace(&quot;${user_id}&quot;, uuId());
	rtb_file_obj = rtb_file_obj.replace(&quot;${gender1}&quot;, gender[ThreadLocalRandom.current().nextInt(0, gender.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${consent1}&quot;, consent[ThreadLocalRandom.current().nextInt(0, consent.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${yob1}&quot;,  vars.get(&quot;yob&quot;));
	rtb_file_obj = rtb_file_obj.replace(&quot;${coppa1}&quot;, coppa[ThreadLocalRandom.current().nextInt(0, coppa.length)]);
	rtb_file_obj = rtb_file_obj.replace(&quot;${gdpr1}&quot;, gdpr[ThreadLocalRandom.current().nextInt(0, gdpr.length)]);

	return rtb_file_obj;
}


// done work perfect
void requestCreate() {
	try {

		String mainRequest = rtbStr();

		mainRequest = mainRequest.replace(&quot;%%requestType%%&quot;,nativeStr());

		mainRequest = mainRequest.replace(&quot;%%pmpType%%&quot;, &quot;&quot;);

		int requestPlace = getRequestPlace();
		if(requestPlace == 0) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,siteStr());
		} else if (requestPlace == 1) {
			mainRequest = mainRequest.replace(&quot;%%requestPlace%%&quot;,appStr());
		}

		mainRequest = mainRequest.replace(&quot;%%deviceType%%&quot;,deviceStr());

		log.info(&quot;&lt;========= Start ======&gt;&quot;);
		log.info(mainRequest);
		vars.put(&quot;index&quot;, mainRequest);
		log.info(&quot;&lt;========= End ======&gt;&quot;);
	} catch (Exception ex) {
		log.err(&quot;&lt;========= Error-Start ======&gt;&quot;);
		log.err(ex.getLocalizedMessage());
		log.err(&quot;&lt;========= Error-End ======&gt;&quot;);
	}
}

try {
    //your code here
    requestCreate();
} catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Native PostProcessor" enabled="false">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.File;
import org.apache.jmeter.service.FileServer;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;
import net.sf.json.JSONArray;

try {
	
	FileOutputStream file = new FileOutputStream(vars.get(&quot;response_path&quot;)+&quot;/demographic-response.csv&quot;,true);
	PrintStream printStream = new PrintStream(file);
	String com1 = vars.get(&quot;com1&quot;);	
	String jsonSting = prev.getResponseDataAsString();
	String response = &quot;No-Match&quot;;
	if(jsonSting != null &amp;&amp; jsonSting.contains(&quot;bid&quot;)) {
		JSONObject jsonObject = new JSONObject();
		jsonObject = (JSONObject) JSONSerializer.toJSON(jsonSting);
		if (jsonObject.containsKey(&quot;bid&quot;)) {
		    JSONArray bidArr = jsonObject.getJSONArray(&quot;bid&quot;);
		    for (Iterator iter = bidArr.iterator(); iter.hasNext();) {
			   JSONObject campainObject = iter.next();
			   if(campainObject.containsKey(&quot;campaignId&quot;)) {
		    	  	String camapignId = campainObject.getString(&quot;campaignId&quot;);
		    	  	if(camapignId.equals(com1)) {
		    	  		response = camapignId;
		    	  		log.info(&quot;Json Reslult Match With CampignId :- &quot; + camapignId);
    	  				printStream.println(com1 + &quot;,&quot; + camapignId);
		    	  		break;
		    	  	} else {
		    	  		log.info(&quot;Json Reslult Not Match With CampignId :- &quot; + camapignId);
    	  			     printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
		    	  	}
		    	  }
			}		    
		}		
	} else {
		log.info(&quot;Json: &quot; + &quot;No Reslult&quot;);
		printStream.println(com1 + &quot;,&quot; + &quot;No Reslult&quot;);
	}
	vars.put(&quot;response&quot;, response);
	printStream.close();
	file.close();
} catch (Exception ex) {
	log.err(&quot;Error :- &quot; + ex.getLocalizedMessage());
}
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Native-app " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${index}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${url}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON/YAML Path Assertion" enabled="false">
            <stringProp name="JSON_PATH">$.bid[*].campaignId</stringProp>
            <stringProp name="EXPECTED_VALUE">${com1}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
